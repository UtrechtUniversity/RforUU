{"title":"R basics","markdown":{"yaml":{"title":"R basics","author":[{"name":"Benjamin Delory","orcid":"0000-0002-1190-8060","email":"b.m.m.delory@uu.nl","affiliations":[{"name":"Environmental sciences group, Copernicus institute of sustainable development, Utrecht University"}]}]},"headingText":"Commenting","containsRefs":false,"markdown":"\n\n\nYou can add comments to your R script using the hash tag symbol: `#`\n\nEvery line that starts with `#` will be ignored by R and will not be executed.\n\n```{r}\n#| eval: true \n#| echo: true \n#| code-fold: false  \n\n#This line of code is a comment and will be ignored by R when running the code\n```\n\n::: callout-important\n## Always comment your R script!\n\nWe strongly advise you to add comments to your R code. At the very least, these comments should indicate ***why*** you have written each section of your code. It can also be useful to add information about the ***what*** and ***how***. These comments can save a lot of time if you need to go back over your code after a while or, even more difficult, if someone else needs to go through your code and understand what you've done.\n:::\n\n## Creating R objects\n\n::: callout-important\n## The assignment operator\n\nNew R objects are created using the assigment operator: `<-`\n\nYou can think of this assignment operator as an arrow that puts what's on its right side into an R object located on its left side.\n\nFor instance, let's create an object called `x` that contains the value 2.\n\n```{r}\n#| eval: true\n#| echo: true\n#| code-fold: false\n\n#Create object\nx <- 2\n\n#Show content of R object\nx\n```\n\n::: callout-tip\n## RStudio shortcut\n\nPress Alt and the minus sign on your keyboard (Alt+-) to quickly write the assignment operator.\n:::\n:::\n\n### Scalars\n\nA scalar is a quantity that can only hold one value at a time. Here are the most common types of scalars in R:\n\n-   *Numeric*: numbers with a decimal value (e.g., 17.8)\n-   *Integer*: numbers without a decimal value (e.g., 18)\n-   *Character*: a letter or a combination of letters. Character strings must be enclosed by quotes in your R code.\n-   *Factor*: data type used in statistical modelling to specify what are the factors in the model\n-   *Logical*: a logical variable can be either `TRUE` or `FALSE`\n\nYou can check the data type of an R object using the `class()` function.\n\n```{r}\n#| eval: true\n#| echo: true\n#| code-fold: false\n\nx <- 2\nclass(x)\n```\n\n### Vectors\n\nA vector is a sequence of data elements of the same type. Vectors can be created using the `c()` function.\n\n```{r}\n#| eval: true\n#| echo: true\n#| code-fold: false\n\n#Numeric vector\nx1 <- c(1,2,3,4,5)\nx1 <- c(1:5)\n\n#Character vector\nx <- c(\"control\", \"treatment\")\n\n#Logical vector\nx <- c(TRUE, TRUE, FALSE)\n\n```\n\nYou can check how many elements there are in a vector using the `length()` function.\n\n```{r}\n#| eval: true\n#| echo: true\n#| code-fold: false\n\nlength(x1)\n```\n\n### Matrices\n\nA matrix is an ensemble of data elements of the same type arranged in a 2D layout (i.e., like a table). Matrices can be created using the `matrix()` function.\n\n```{r}\n#| eval: true\n#| echo: true\n#| code-fold: false\n\n#Generate 25 random numbers between 0 and 1 from a uniform distribution\nx2 <- runif(25)\n\n#Arrange these random numbers into a matrix with 5 rows and 5 columns\nx2 <- matrix(x2,\n            ncol = 5,\n            nrow = 5)\n\n#View matrix\nx2\n```\n\nYou can check the size of a matrix using the `dim()` function. The first element of the output is the number of rows. The second element of the output is the number of columns.\n\n```{r}\n#| eval: true\n#| echo: true\n#| code-fold: false\n\ndim(x2)\n```\n\nYou can also extract the number of rows and columns using `nrow()` and `ncol()`, respectively.\n\n```{r}\n#| eval: true\n#| echo: true\n#| code-fold: false\n\nnrow(x2)\nncol(x2)\n```\n\n### Data frames\n\nA data frame is an ensemble of data elements arranged in a 2D layout (i.e., like a table). Different columns of a data frame can contain different types of data (character, logical, numeric, etc.). It is probably the most common data structure used when analysing ecological data. Data frames can be created using the `data.frame()` function.\n\n```{r}\n#| eval: true\n#| echo: true\n#| code-fold: false\n\n#Create data frame\nx3 <- data.frame(Var1=c(1:6),\n                 Var2=c(\"R\", \"i\", \"s\", \"f\", \"u\", \"n\"),\n                 Var3=c(TRUE, TRUE, FALSE, FALSE, TRUE, FALSE))\n\n#View data frame\nx3\n```\n\nThe functions `dim()`, `ncol()`, and `nrow()` can also be used on data frames.\n\n### Lists\n\nA list is a vector containing other objects (vectors, matrices, data frames, other lists, etc.). It can contain elements of various data types. Lists can be created using the `list()` function.\n\n```{r}\n#| eval: true\n#| echo: true\n#| code-fold: false\n\n#Create a list\nx4 <- list(x1, x2, x3)\n\n#View list\nx4\n```\n\nThe `length()` function can be used to check how many data elements there are in a list.\n\n```{r}\n#| eval: true\n#| echo: true\n#| code-fold: false\n\nlength(x4)\n```\n\n## Indexing\n\nOne of the main advantages of R is that it is very easy to extract any given value from a data set. This is called indexing. Let's have a look at a few examples.\n\n### Vectors\n\nTo extract the *i^th^* value of a vector object called `x`, you should write `x[i]`.\n\n```{r}\n#| eval: true\n#| echo: true\n#| code-fold: false\n\n#Extract the third value of the x1 object \n#x1 is a vector\n\nx1[3]\n```\n\n### Matrices and data frames\n\nTo extract the value located at the intersection between the *i^th^* row and *j^th^* column of a matrix or a data frame object called `x`, you should write `x[i,j]`.\n\n```{r}\n#| eval: true\n#| echo: true\n#| code-fold: false\n\n#Extract the value at the intersection of row 2 and column 3 in the x2 object\n#x2 is a matrix\n\nx2[2,3]\n```\n\nWith a data frame, there are a couple of other options to extract data from specific columns. One option is to use the dollar symbol (`$`) followed by the column name.\n\n```{r}\n#| eval: true\n#| echo: true\n#| code-fold: false\n\n#Extract all the values stored in the second column of the x3 object\n#x3 is a data frame\n\nx3$Var2\n```\n\nNote that the following code would also work and would produce the same result. To extract all the values from a specific column, simply leave the square brackets empty before the comma. It is important to specify the name of the column (in quotes), otherwise you will simply extract all the values from your data frame.\n\n```{r}\n#| eval: true\n#| echo: true\n#| code-fold: false\n\n#Extract all the values stored in the second column of the x3 object\n#x3 is a data frame\n\nx3[,\"Var2\"]\n```\n\nIf you want to subset a matrix or a data frame called `x` (i.e., selecting only specifics rows and columns), you should write:\n\n`x[rows to select, columns to select]`\n\n```{r}\n#| eval: true\n#| echo: true\n#| code-fold: false\n\n#Extract only the values located between rows 2 and 4 \n#in the second column of the x3 object\n#x3 is a data frame\n\nx3[2:4, 2]\n```\n\nNote that writing `2:4` means \"from index 2 to index 4\". It is exactly the same as writing `c(2,3,4)`.\n\n### Lists\n\nTo extract the *i^th^* element of a list object called `x`, you should write `x[[i]]`.\n\n```{r}\n#| eval: true\n#| echo: true\n#| code-fold: false\n\n#Extract the second element of the x4 object\n#x4 is a list\n\nx4[[2]]\n```\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"wrap","code-link":false,"code-line-numbers":false,"code-tools":true,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"toc-depth":5,"output-file":"R_basics.html"},"language":{"code-summary":"Show me the R code"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.2.269","editor":"visual","editor_options":{"chunk_output_type":"console"},"theme":{"light":["cosmo","theme-light.scss"],"dark":["cosmo","theme-dark.scss"]},"code-copy":true,"fig-cap-location":"bottom","title":"R basics","author":[{"name":"Benjamin Delory","orcid":"0000-0002-1190-8060","email":"b.m.m.delory@uu.nl","affiliations":[{"name":"Environmental sciences group, Copernicus institute of sustainable development, Utrecht University"}]}]},"extensions":{"book":{"multiFile":true}}}}}