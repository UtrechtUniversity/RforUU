{"title":"Tutorial 5: Data analysis in R","markdown":{"yaml":{"title":"Tutorial 5: Data analysis in R","author":[{"name":"Benjamin Delory","orcid":"0000-0002-1190-8060","email":"b.m.m.delory@uu.nl","affiliations":[{"name":"Environmental sciences group, Copernicus institute of sustainable development, Utrecht University"}]}]},"headingText":"About this tutorial","containsRefs":false,"markdown":"\n\n\nWelcome to this tutorial on data analysis in R!\n\nIn this tutorial, **our goal is to review some of the R functions you will need to analyse the data you have collected in the field and answer your research questions**. For this tutorial, we strongly recommend that you reflect on what you have learned in the Statistics GSS course during Period 3. The Statistics GSS course taught you many useful tools for data analysis. Now it's time to put them into practice on a real ecological data set. For this tutorial, you will be using the same vegetation data as in the tutorial on data wrangling. If you don't remember what these data are, please refer to the first sections of the first tutorial on data wrangling.\n\nThe focus of this tutorial will be on answering the following research questions:\n\n-   In the first exercise, we will test if different habitat types around Utrecht (grassland, forest, heathland, peatland) harbor different levels of plant species diversity.\n\n-   In the second exercise, we will visualize the differences in plant species composition between the different habitats.\n\nLet's get started!\n\n## Load R packages\n\n```{r}\n#| eval: true \n#| echo: true \n#| warning: false \n#| message: false  \n\nlibrary(tidyverse) \nlibrary(knitr)\nlibrary(vegan)\nlibrary(car)\nlibrary(emmeans)\nlibrary(viridis)\n```\n\n## Importing vegetation data\n\nYou can download the data manually (either from Brightspace or from GitHub), but you can also import the data directly from Github using an R function called `read_csv()`. Let's give it a try.\n\n```{r}\n#| eval: true\n#| echo: true\n#| warning: false\n#| message: false\n\n#URL to access the data\n\nurl <- \"https://raw.github.com/BenjaminDelory/GEO2-2439/master/Data/data_vegetation.csv\"\n\n#Import data in R\n\ndata <- readr::read_csv(url)\n```\n\nYou can see that the dataset consists of a number of observations (rows) of 7 variables (columns). These variables are:\n\n-   **Date**: the sampling date (YYYY-MM-DD)\n-   **Student**: the student ID number\n-   **Site**: the site name (4 levels: A_grassland, B_forest, C_heathland, D_peatland)\n-   **Location**: the location within a site (2 levels: 1 or 2)\n-   **Plot**: the plot ID number (in each site, plots were labelled from 1 to 20)\n-   **Species**: the plant species name (or species group name)\n-   **Cover**: the percent cover (numeric value between 0 and 100)\n\n## Organise vegetation data\n\nBefore carrying out any statistical analysis, we first need to get to know our data. The best way to do this is to represent them graphically. That's precisely what we are going to do next, but first we need to organize our data in such a way that we can represent plant species diversity (calculated using Hill numbers, see the tutorial on quantifying biodiversity) in different habitat types.\n\nFor the moment, the data set consists of numerous individual observations made by different students at different sites on four different dates... This is a lot of information, and we first need to summarize it by calculating the average cover of each plant species in a plot (i.e. across all students and all observation dates).\n\n::: callout-note\nNote that it would also have been possible to plot the results separately for each observation date, but for simplicity's sake we won't dwell on this temporal aspect in this tutorial.\n:::\n\nThe first step is to write R code to do the following:\n\n-   Create a new object called `data_plot` in which the reorganized data will be stored.\n\n-   Remove all observations related to \"Deadwood\", \"Bare_ground\" or \"Litter\" (you can do this using `filter()`).\n\n-   Group data by Site, Plot, and Species (you can do this using `group_by()`). We will deliberately ignore the `Location` variable in this tutorial (despite the fact that there may be small differences in species composition and diversity between locations).\n\n-   Calculate an average cover value for each unique combination of Site, Location, Plot, and Species (you can do this using `summarize()`).\n\n-   Convert Site as a factor (you can do this using `mutate()`).\n\n-   When this is done, use `pivot_wider()` to create as many new columns as there are species in the data. These columns should contain the average cover value for each species measured in all plots. Make sure that, if a species is not present in a plot, the percent cover of that species is zero in that plot.\n\n```{r}\n#| eval: true\n#| echo: true\n#| warning: false\n#| message: false\n\ndata_plot <- data |> \n  filter(Species != \"Deadwood\") |> \n  filter(Species != \"Bare_ground\") |>\n  filter(Species != \"Litter\") |>\n  group_by(Site, Plot, Species) |>\n  summarise(Avg_cover = mean(Cover)) |> \n  mutate(Site = as.factor(Site)) |> \n  pivot_wider(names_from = Species,\n              values_from = Avg_cover,\n              values_fill = 0)\n\nkable(head(data_plot, 10))\n```\n\nThe result is a data set comprising 80 rows (one row per plot) and 132 variables (including 130 species).\n\nWe are ready to go!\n\n## Exercise 1: Does plant species diversity change with habitat type?\n\n### Step 1: Calculate Hill numbers\n\nSince we are interested in modelling the relationship between plant species diversity and habitat type, we first need to quantify plant species diversity in all plots. We will do this using Hill numbers (see tutorial on quantifying taxonomic diversity if you need to refresh your memory). To do this, we first need to calculate the [*relative*]{.underline} abundance of all species in all plots. The simplest way to do this is to create a new column called `Total` in the dataset by summing the percent cover value of all species present in each plot, and then use this information to express all species data in relative form.\n\n```{r}\n#| eval: true\n#| echo: true\n#| warning: false\n#| message: false\n\n#Create a new column called \"Total\"\n\ndata_plot <- data_plot |> \n  mutate(Total = sum(c_across(Acer_pseudoplatanus:Myrica_gale)))\n```\n\nWe can now reorganize the data into a more tidy format using the `pivot_longer()` function. What we want is a data set whose structure is similar to that of our original data, but with an extra column (`Total`). Since we have added several observations with zero values (which happens when a species is not present in a plot), we will end up with a dataset with many more rows than in our original data. But this does not matter, as we can easily filter out these values using `filter()`.\n\n```{r}\n#| eval: true\n#| echo: true\n#| warning: false\n#| message: false\n\n#Reorganise data (tidy format) and filter out zero values\n\ndata_plot <- data_plot |> \n  pivot_longer(cols = Acer_pseudoplatanus:Myrica_gale,\n               names_to = \"Species\",\n               values_to = \"Abundance\") |> \n  filter(Abundance > 0)\n```\n\nThe next step is to calculate the relative abundance of each species in all plots by dividing `Abundance` by `Total`. We will store these relative abundance values in a new column: `Rel_abundance`.\n\n```{r}\n#| eval: true\n#| echo: true\n#| warning: false\n#| message: false\n\n#Calculate species relative abundance\n\ndata_plot <- data_plot |> \n  mutate(Rel_abundance = Abundance/Total)\n```\n\nWe are now ready to calculate Hill numbers. We will do this for three values of *q* (0, 1, and 2). We can easily do this using `group_by()` and `summarise()`. Let's store this data set into a new R object called `data_hill`.\n\n```{r}\n#| eval: true\n#| echo: true\n#| warning: false\n#| message: false\n\n#Calculate Hill numbers at q=0, q=1, and q=2\n\ndata_hill <- data_plot |> \n  group_by(Site, Plot) |> \n  summarise(q0=sum(Rel_abundance^0)^(1/(1-0)),\n            q1=exp(-sum(Rel_abundance*log(Rel_abundance))),\n            q2=sum(Rel_abundance^2)^(1/(1-2)))\n```\n\nThis new dataset consists of 80 rows (one row per plot) and 5 variables:\n\n-   **Site**: the site name (4 levels: A_grassland, B_forest, C_heathland, D_peatland)\n\n-   **Plot**: the plot ID number (in each site, plots were labelled from 1 to 20)\n\n-   **q0**: the effective number of species at q=0 (species richness)\n\n-   **q1**: the effective number of species at q=1 (Hill-Shannon)\n\n-   **q2**: the effective number of species at q=2 (Hill-Simpson)\n\nTo make it easier to plot the data for multiple values of *q*, let's reorganise the dataset to have all values of *q* stored in a single column. We will store this new data set in a new R object called `data_hill_long`.\n\nUse `pivot_longer()` to reorganise the dataset and create a column called `q` to store all diversity order values (0, 1, and 2) and a column called `diversity` to store the effective number of species in each community. In `pivot_longer()`, you will need to use two extra arguments: `names_prefix = \"q\"` (this will make sure to remove the letter \"q\" from \"q0\", \"q1\", and \"q2\") and `names_transform = as.numeric` (to convert \"0\", \"1\" and \"2\" into numeric values).\n\n```{r}\n#| eval: true\n#| echo: true\n#| warning: false\n#| message: false\n\n#Reorganise data ina tidy format\n\ndata_hill_long <- data_hill |> \n  pivot_longer(q0:q2,\n               names_to = \"q\",\n               names_prefix = \"q\",\n               names_transform = as.numeric,\n               values_to = \"diversity\")\n\nkable(head(data_hill_long, 10))\n```\n\n### Step 2: Plot the data\n\nBefore fitting a statistical model to our data, let's first create a plot to help us answer our research question: Does plant species diversity change with habitat type?\n\nThis research question gives us important information about what needs to be represented. The question tells us that our graph should present data on plant species diversity (`diversity`) as a function of habitat type (`Site`). As we have calculated plant diversity for three diversity orders (q=0, q=1 and q=2), it makes sense to create a panel for each value of *q*.\n\nLet's create our plot!\n\nUsing what you have learned in the previous tutorials, create a high-quality figure that answers the research question. Feel free to personalize your plot in any way you think best communicates the results (you do not necessarily have to produce the same plot as below).\n\n```{r}\n#| eval: true\n#| echo: true\n#| warning: false\n#| message: false\n#| fig-align: center\n#| fig-dpi: 1000\n#| fig-height: 3.4\n\n#Add \"q=\" in front of diversity order values\n\ndata_hill_long$q <- paste(\"q=\", data_hill_long$q, sep = \"\")\n\n#Plot the data\n\nggplot(data_hill_long,\n       aes(x = Site,\n           y = diversity))+\n  geom_jitter(shape = 1,\n              alpha = 0.3,\n              height = 0,\n              width = 0.2)+\n  stat_summary(fun.data = \"mean_cl_boot\")+\n  theme_bw()+\n  xlab(\"\")+\n  ylab(\"Effective number of species\")+\n  facet_wrap(~q, ncol=3)+\n  theme(axis.text.x = element_text(angle=90, \n                                   vjust = 0.5,\n                                   hjust = 1))+\n  scale_colour_viridis(discrete = TRUE)\n```\n\nWhat can you already notice from this graph?\n\nDoes it look like ANOVA (ANalysis Of VAriance) assumptions are met?\n\n### Step 3: Fit a model\n\nLet's fit a statistical model to study the relationship between our response variable of interest (Plant species diversity at different values of *q*) and our two experimental factors (Site and Location). There are different ways to do this in R. First, let's check whether a ***simple linear regression model*** can correctly model our data. We will use the `lm()` function to fit this linear model (this will give us the same results as the `aov()` function). Note that each group being compared has 10 independent observations, which is not sufficient to test the assumption that the data are normally distributed at each combination of factor levels.\n\nThe syntax to fit a simple linear regression model with two predictor variables in R is as follows:\n\n`model <- lm(Response ~ Predictor1*Predictor2, data)`\n\nThe asterisks (`*`) means that we want to take the interaction between predictor variables into account (you then assume that Predictor1 and Predictor2 have non-additive effects on your response variable). Using a plus sign (`+`) instead of an asterisks would fit a model without considering an interaction between predictors (in that case, you then assume that Predictor1 and Predictor2 have additive effects on your response variable).\n\nLet's fit a linear model to plant diversity data at q=0 (i.e., species richness) using Site as an explanatory variable.\n\n```{r}\n#| eval: true \n#| echo: true \n#| warning: false \n#| message: false \n\n#Fit simple linear regression model\n#Only consider q=0 for now\n\nmodel1 <- lm(q0 ~ Site,\n             data = data_hill)\n```\n\nBefore checking model results, let's first make sure that model assumptions are met. We can check for homoscedasticity by plotting model residuals (i.e., the difference between model predictions and observations) against fitted values (i.e., model predictions). This is called a residual plot. Fitted values can be calculated using `predict()`. Residuals can be calculated using `residuals()`. Try to create such a plot using what you have learned in previous tutorials. Do you notice any pattern in this residual plot?\n\n::: panel-tabset\n## Solution (code)\n\n```{r}\n#| eval: true \n#| echo: true \n#| warning: false \n#| message: false\n#| fig-align: center\n\nplot <- data.frame(predicted = predict(model1),\n                   residuals = residuals(model1)) |> \n        ggplot(aes(x=predicted,\n                 y=residuals))+\n        geom_point()+\n        geom_hline(yintercept = 0,\n                   colour = \"red\",\n                   linetype = 2)+\n        theme_bw()+\n        xlab(\"Predicted values\")+\n        ylab(\"Residuals\")+\n        theme(axis.title.x = element_text(margin = margin(t=10)),\n              axis.title.y = element_text(margin = margin(r=10)),\n              axis.text = element_text(colour=\"black\"))\n```\n\n## Solution (plot)\n\n```{r}\n#| eval: true \n#| echo: true \n#| warning: false \n#| message: false\n#| fig-align: center\n\nplot\n```\n:::\n\nIt seems that there is a strong mean - variance relationship in our data (heteroscedasticity), which means that the model we just fitted is not the best option. A better approach is to switch to a ***generalised linear model*** (also referred to as GLM). Generalised linear models can be fitted using the `glm()` function in the *stats* package. The syntax is exactly the same as for the `lm()` function, but there is an extra argument to specify: `family`. The `family` argument allows you to describe the error distribution and the link function to be used in the model.\n\n::: callout-note\n## Relationship between `lm()` and `glm()`\n\nA simple linear regression model (`lm()`) is a special case of a gaussian generalised linear model with an identity link. This means that\n\n`lm(Response ~ Predictor1*Predictor2, data)`\n\nand\n\n`glm(Response ~ Predictor1*Predictor2, data, family=gaussian(link=\"identity\")`\n\nproduce the same results.\n:::\n\nIn the context of this course, two types of distribution are of interest to us:\n\n-   The **Poisson distribution** **to model [count]{.underline} data** (e.g., plant diversity at q=0). A Poisson distribution is characterized by the fact that its mean and variance are equal. In reality, cases of overdispersion (where the variance is greater than the mean) are frequent in ecological data. One way of solving this problem is to use a **quasi-Poisson distribution**, which corrects for overdispersion by estimating an overdispersion parameter (it assumes that the variance is a linear function of the mean). Using a log link function will also help deal with heteroscedasticity. This can be done by writing `family=quasipoisson(link=\"log\")` in `glm()`.\n\n-   The **Gamma distribution** **to model [continuous and strictly positive]{.underline} data** (e.g., plant diversity at q=1 and q=2). Negative values and zeros are not allowed with a gamma distribution. This distribution is useful to model variables such as biomass, length, etc. Using a log link function will also help deal with heteroscedasticity. This can be done by writing `family=Gamma(link=\"log\")` in `glm()`.\n\nLet's fit a new model (this time a GLM) to our species richness data (q=0).\n\n```{r}\n#| eval: true \n#| echo: true \n#| warning: false \n#| message: false \n\n#Fit a generalised linear model with a quasipoisson distribution\n\nmodel2 <- glm(q0 ~ Site,\n              data = data_hill,\n              family = quasipoisson(link=\"log\"))\n```\n\nBefore checking model results, let's first create a residual plot. What do you notice? What's new in this residual plot?\n\n::: panel-tabset\n## Solution (code)\n\n```{r}\n#| eval: true \n#| echo: true \n#| warning: false \n#| message: false\n#| fig-align: center\n\nplot <- data.frame(predicted = predict(model2),\n                   residuals = residuals(model2)) |> \n        ggplot(aes(x=predicted,\n                 y=residuals))+\n        geom_point()+\n        geom_hline(yintercept = 0,\n                   colour = \"red\",\n                   linetype = 2)+\n        theme_bw()+\n        xlab(\"Predicted values\")+\n        ylab(\"Pearson residuals\")+\n        theme(axis.title.x = element_text(margin = margin(t=10)),\n              axis.title.y = element_text(margin = margin(r=10)),\n              axis.text = element_text(colour=\"black\"))\n```\n\n## Solution (plot)\n\n```{r}\n#| eval: true \n#| echo: true \n#| warning: false \n#| message: false\n#| fig-align: center\n\nplot\n```\n:::\n\nLet's now take a look at model outputs. You can do this using `summary()`. This output contains a wealth of useful information. The coefficient table gives you the coefficients of the model. When looking at the results of the statistical tests, it seems that most of the coefficients in the equation above can be considered significantly different from zero (marked with a dot or an asterisks).\n\n::: panel-tabset\n## Solution (code)\n\n```{r}\n#| eval: true \n#| echo: true \n#| warning: false \n#| message: false \n\noutput <- summary(model2)\n```\n\n## Solution (output)\n\n```{r}\n#| eval: true \n#| echo: true \n#| warning: false \n#| message: false\n\noutput\n```\n:::\n\nGLM models do not return any R² values (like for simple linear regression models). The closest we can get is to calculate the explained deviance:\n\n$$\nExplainedDeviance = 100 \\times \\frac{NullDeviance - ResidualDeviance}{NullDeviance}\n$$\n\n```{r}\n#| eval: true \n#| echo: true \n#| warning: false \n#| message: false \n\nnull_deviance <- summary(model2)$null.deviance\nresidual_deviance <- summary(model2)$deviance\n\nexplained_deviance <- 100*(null_deviance-residual_deviance)/null_deviance\n```\n\nThe explanatory variables included in the model explain `r round(explained_deviance, 1)`% of the variation in plant species richness (q=0).\n\n### Step 4: Compare group means\n\nYou can use the `Anova()` function in the *car* package to produce an ANOVA table (in this case, an analysis of deviance table). This table shows that plant species richness strongly differs between sites.\n\n::: panel-tabset\n## Solution (code)\n\n```{r}\n#| eval: true \n#| echo: true \n#| warning: false \n#| message: false \n\ntable <- Anova(model2)\n```\n\n## Solution (table)\n\n```{r}\n#| eval: true \n#| echo: true \n#| warning: false \n#| message: false \n\ntable\n```\n:::\n\nTo determine where the differences in plant species richness lie between the four different sites, we need to perform a posthoc test. The `emmeans()` function in the *emmeans* R package is a good option for this. For the `emmeans()` function, we will need to specify a value for the following arguments:\n\n-   `object` (the object containing the fitted model)\n-   `specs` (a character vector specifying the names of the predictors for which levels must be compared). In this example, this is `Site`.\n-   `by` (a character vector specifying the names of the predictors to condition on). We will not need this argument in this case because our model has only one explanatory variable, but this argument is particularly useful if the model includes an interaction term between two explanatory variables.\n-   `contr` (a character value specifying the contrasts to be added). We will use pairwise contrasts (i.e., all possible pairs of groups will be compared).\n\nTo check the results of the posthoc test, we will then call a `summary()` function on the object produced by `emmeans()` . In `summary()`, we will use the `type` argument to specify that we want model predictions to be on the same scale as the original data (not log scale, but original scale).\n\n::: panel-tabset\n## Solution (code)\n\n```{r}\n#| eval: true \n#| echo: true \n#| warning: false \n#| message: false \n\ntable <- summary(emmeans(object = model2, \n                         specs = \"Site\", \n                         contr = \"pairwise\"), \n         type=\"response\")\n```\n\n## Solution (table)\n\n```{r}\n#| eval: true \n#| echo: true \n#| warning: false \n#| message: false \n\ntable\n```\n:::\n\nWhat can you conclude from this posthoc test?\n\n::: callout-important\n## Challenge to do at home\n\nYou can repeat all steps 3 and 4 for plant species diversity at q=1 and q=2. The only difference will be that you will need to use a different distribution family to model the data (since the diversity values at q=1 and q=2 are continuous and strictly positive). A Gamma distribution should do the trick.\n\nGive it a try!\n:::\n\n```{r}\n#| eval: true \n#| echo: false \n#| warning: false \n#| message: false \n\nmodel3 <- glm(q1 ~ Site,\n              data = data_hill,\n              family = Gamma(link=\"log\"))\n\nmodel4 <- glm(q2 ~ Site,\n              data = data_hill,\n              family = Gamma(link=\"log\"))\n\ntable3 <- summary(emmeans(object = model3, \n                         specs = \"Site\", \n                         contr = \"pairwise\"), \n          type=\"response\")\n\ntable4 <- summary(emmeans(object = model4, \n                         specs = \"Site\", \n                         contr = \"pairwise\"), \n          type=\"response\")\n```\n\n### Step 5: Add posthoc test results to the graph\n\nWe can add posthoc test results to a graph by adding annotations. This is often done by adding letters next to the groups being compared. Groups that do not share a common letter are considered statistically significantly different from each other (p \\< 0.05). We can easily add these letters to our graph in two steps:\n\n-   Start by creating a data frame (called `annotations` in the code below) that contains all the information that *ggplot2* needs to add the annotations to your graph. In our example, this data frame should have as many rows as annotations to add to the graph and must contain the following columns:\n\n    -   **Site**: the site name (4 levels: A_grassland, B_forest, C_heathland, D_peatland). Use the same column name as in `data_hill_long`.\n    -   **q**: the diversity order. Use the same column name as in `data_hill_long`.\n    -   **y**: the vertical coordinates where annotations should be added. You can freely choose the name of this column.\n    -   **Label**: the annotations to be added to the graph. You can freely choose the name of this column.\n\n-   Once this is done, add an extra layer to your ggplot object using `geom_text()`.\n\n```{r}\n#| eval: true\n#| echo: true\n#| warning: false\n#| message: false\n#| fig-align: center\n#| fig-dpi: 1000\n#| fig-height: 3.4\n\n#Create table with annotations\n\nannotations <- data.frame(Site=rep(unique(data_hill_long$Site), 3),\n                          q=rep(unique(data_hill_long$q), each=4),\n                          y=c(rep(50, 4),\n                              rep(30, 4),\n                              rep(23, 4)),\n                          Label=c(\"a\", \"b\", \"b\", \"a\",\n                                  \"a\", \"b\", \"b\", \"a\",\n                                  \"a\", \"b\", \"b\", \"a\"))\n\n#Plot the data\n\nggplot(data_hill_long,\n       aes(x = Site,\n           y = diversity))+\n  geom_jitter(shape = 1,\n              alpha = 0.3,\n              height = 0,\n              width = 0.2)+\n  stat_summary(fun.data = \"mean_cl_boot\")+\n  theme_bw()+\n  xlab(\"\")+\n  ylab(\"Effective number of species\")+\n  facet_wrap(~q, ncol=3)+\n  theme(axis.text.x = element_text(angle=90, \n                                   vjust = 0.5,\n                                   hjust = 1))+\n  scale_colour_viridis(discrete = TRUE)+\n  geom_text(data=annotations,\n            aes(y=y,\n                x=Site,\n                label=Label))\n```\n\n## Exercise 2: Non-metric multidimensional scaling\n\n### Step 1: Choose a measure of association\n\n**Non-metric multidimensional scaling** (NMDS) is a technique often used in ecological research to visualise differences (or (dis)similarities) in species composition between ecological communities.\n\nThe first step is to choose a measure of association and calculate a dissimilarity matrix. This dissimilarity matrix will have as many rows and columns as ecological communities to be compared. The help page of the `vegdist()` function of the *vegan* package lists a number of dissimilarity indices for ecologists wishing to quantify dissimilarity in species composition between communities. You can access this help page by running `?vegdist` in your R console (a detailed discussion of the advantages and disadvantages of each dissimilarity index is beyond the scope of this tutorial). The Bray-Curtis dissimilarity is usually good at detecting ecological gradients (see `?vegdist`) and is often used as default when performing NMDS. This is the dissimilarity index we are going to use in this tutorial too.\n\n### Step 2: Organise your data\n\nTo obtain the dissimilarity matrix required for NMDS, we first need to reorganise our data so that each species has its own column and each ecological community has its own row (i.e., a site-by-species matrix). We already wrote the code to do this at the beginning of this tutorial.\n\n```{r}\n#| eval: true \n#| echo: true \n#| warning: false \n#| message: false \n\ndata_nmds <- data |> \n  filter(Species != \"Deadwood\") |> \n  filter(Species != \"Bare_ground\") |>\n  filter(Species != \"Litter\") |>\n  group_by(Site, Plot, Species) |>\n  summarise(Avg_cover = mean(Cover)) |> \n  mutate(Site = as.factor(Site)) |> \n  pivot_wider(names_from = Species,\n              values_from = Avg_cover,\n              values_fill = 0)\n\nkable(head(data_nmds, 10))\n```\n\n### Step 3: Perform the NMDS\n\nNow that our community dataset has the right format, we can perform the NMDS using the `metaMDS()` function of the *vegan* package. The following arguments are of particular importance:\n\n-   `comm`: the community data (only select the species columns).\n-   `distance`: a character value for the dissimilarity index used. Use `distance=\"bray\"` for the Bray-Curtis dissimilarity index.\n-   `k`: the number of dimensions to compute. Let's start with `k=2` (we want to produce a 2D plot).\n-   `trymax`: the maximum number of random starts in search of a stable solution. The NMDS algorithm iteratively searches for a stable solution (numerical optimisation methods). Increasing the value of this argument can help reaching a stable solution.\n\nWe will keep the default values for all other arguments. Store the results in an object named `nmds`. Do not forget to set a seed (using `set.seed()` for reproducibility).\n\n```{r}\n#| eval: true \n#| echo: true \n#| warning: false \n#| message: false \n\nset.seed(123)\n\nnmds <- metaMDS(comm = data_nmds[,3:ncol(data_nmds)],\n                distance = \"bray\",\n                k = 2,\n                trymax = 1000)\n```\n\n### Step 4: Check NMDS results\n\nThe main goal of NMDS is to visualise a dissimilarity matrix in a lower (typically 2D) dimensional space. Contrary to principal coordinate analysis (PCoA), which aims to create a plot in which distances between points match the original dissimilarities as closely as possible, NMDS focuses on representing the order, or ranking, of the original dissimilarities as closely as possible (Zuur AF, Ieno EN, Smith GM. 2007. *Analysing ecological data*. Springer.).\n\nThe first way to assess the quality of the display is to look at a parameter called \"stress\". You can extract it from the `nmds` object created earlier using `nmds$stress`. In our example, the stress value is equal to `r round(nmds$stress, 3)`. Zuur et al (2007) provided some guidelines on how to interpret stress values (usually, the lower the stress value, the better):\n\n-   stress \\< 0.05: Excellent configuration\n-   stress between 0.05 and 0.1: Good configuration\n-   stress between 0.1 and 0.2: Be careful with interpretation\n-   stress between 0.2 and 0.3: Problems start. Consider increasing the number of dimensions (`k`).\n-   stress above 0.3: Poor representation. Increase the number of dimensions (`k`).\n\nAnother way to assess the quality of the configuration is to create a Shepard plot. A Shepard plot shows the relationship between ordination distances (i.e., distances in the configuration produced by the NMDS) and original distances. You can produce a Shepard plot using the `stressplot()` function in *vegan*. What can you conclude from this Shepard plot?\n\n```{r}\n#| eval: true \n#| echo: true \n#| warning: false \n#| message: false\n#| fig-align: center\n\nstressplot(nmds)\n```\n\n### Step 5: Visualise NMDS results\n\nNMDS results are stored in our `nmds` object. You can extract the coordinates of each community using `nmds$points`. To make it easier to work with *ggplot2*, we will add these coordinates to our data frame (`data_nmds`).\n\n```{r}\n#| eval: true \n#| echo: true \n#| warning: false \n#| message: false\n\ndata_nmds <- cbind(data_nmds, nmds$points)\n\nkable(head(data_nmds, 10))\n```\n\nWe now have everything we need to plot the results of the NMDS using *ggplot2*:\n\n-   Create a plot displaying MDS1 on the horizontal axis and MDS2 on the vertical axis.\n-   Use a specific colour for each habitat type (mind colour-blind people!).\n-   Add an informative legend to your graph.\n-   Add an annotation on the top left corner of your graph for the stress value. Use `geom_text()` to do that.\n\nWhat can you conclude from this NMDS?\n\n```{r}\n#| eval: true \n#| echo: true \n#| warning: false \n#| message: false\n#| fig-align: center\n#| fig-dpi: 1000\n\ndata_nmds |> \n  ggplot(aes(x = MDS1,\n             y = MDS2,\n             colour = Site))+\n  geom_point(size=2.5)+\n  theme_bw()+\n  scale_colour_viridis(name = \"Habitat type\",\n                       discrete = TRUE,\n                       option = \"D\")+\n  theme(axis.text = element_text(colour=\"black\"),\n        axis.title.x = element_text(margin = margin(t=10)),\n        axis.title.y = element_text(margin = margin(r=10)))+\n  xlab(\"NMDS1\")+\n  ylab(\"NMDS2\")+\n  geom_text(data=data.frame(x=min(data_nmds$MDS1),\n                            y=max(data_nmds$MDS2),\n                            label=paste(\"Stress = \", \n                                        round(nmds$stress, 3), \n                                        sep=\"\")), \n            aes(x = x, \n                y = y, \n                label = label),\n            hjust = 0.1, \n            vjust = 0, \n            inherit.aes = FALSE)\n```\n","srcMarkdownNoYaml":"\n\n## About this tutorial\n\nWelcome to this tutorial on data analysis in R!\n\nIn this tutorial, **our goal is to review some of the R functions you will need to analyse the data you have collected in the field and answer your research questions**. For this tutorial, we strongly recommend that you reflect on what you have learned in the Statistics GSS course during Period 3. The Statistics GSS course taught you many useful tools for data analysis. Now it's time to put them into practice on a real ecological data set. For this tutorial, you will be using the same vegetation data as in the tutorial on data wrangling. If you don't remember what these data are, please refer to the first sections of the first tutorial on data wrangling.\n\nThe focus of this tutorial will be on answering the following research questions:\n\n-   In the first exercise, we will test if different habitat types around Utrecht (grassland, forest, heathland, peatland) harbor different levels of plant species diversity.\n\n-   In the second exercise, we will visualize the differences in plant species composition between the different habitats.\n\nLet's get started!\n\n## Load R packages\n\n```{r}\n#| eval: true \n#| echo: true \n#| warning: false \n#| message: false  \n\nlibrary(tidyverse) \nlibrary(knitr)\nlibrary(vegan)\nlibrary(car)\nlibrary(emmeans)\nlibrary(viridis)\n```\n\n## Importing vegetation data\n\nYou can download the data manually (either from Brightspace or from GitHub), but you can also import the data directly from Github using an R function called `read_csv()`. Let's give it a try.\n\n```{r}\n#| eval: true\n#| echo: true\n#| warning: false\n#| message: false\n\n#URL to access the data\n\nurl <- \"https://raw.github.com/BenjaminDelory/GEO2-2439/master/Data/data_vegetation.csv\"\n\n#Import data in R\n\ndata <- readr::read_csv(url)\n```\n\nYou can see that the dataset consists of a number of observations (rows) of 7 variables (columns). These variables are:\n\n-   **Date**: the sampling date (YYYY-MM-DD)\n-   **Student**: the student ID number\n-   **Site**: the site name (4 levels: A_grassland, B_forest, C_heathland, D_peatland)\n-   **Location**: the location within a site (2 levels: 1 or 2)\n-   **Plot**: the plot ID number (in each site, plots were labelled from 1 to 20)\n-   **Species**: the plant species name (or species group name)\n-   **Cover**: the percent cover (numeric value between 0 and 100)\n\n## Organise vegetation data\n\nBefore carrying out any statistical analysis, we first need to get to know our data. The best way to do this is to represent them graphically. That's precisely what we are going to do next, but first we need to organize our data in such a way that we can represent plant species diversity (calculated using Hill numbers, see the tutorial on quantifying biodiversity) in different habitat types.\n\nFor the moment, the data set consists of numerous individual observations made by different students at different sites on four different dates... This is a lot of information, and we first need to summarize it by calculating the average cover of each plant species in a plot (i.e. across all students and all observation dates).\n\n::: callout-note\nNote that it would also have been possible to plot the results separately for each observation date, but for simplicity's sake we won't dwell on this temporal aspect in this tutorial.\n:::\n\nThe first step is to write R code to do the following:\n\n-   Create a new object called `data_plot` in which the reorganized data will be stored.\n\n-   Remove all observations related to \"Deadwood\", \"Bare_ground\" or \"Litter\" (you can do this using `filter()`).\n\n-   Group data by Site, Plot, and Species (you can do this using `group_by()`). We will deliberately ignore the `Location` variable in this tutorial (despite the fact that there may be small differences in species composition and diversity between locations).\n\n-   Calculate an average cover value for each unique combination of Site, Location, Plot, and Species (you can do this using `summarize()`).\n\n-   Convert Site as a factor (you can do this using `mutate()`).\n\n-   When this is done, use `pivot_wider()` to create as many new columns as there are species in the data. These columns should contain the average cover value for each species measured in all plots. Make sure that, if a species is not present in a plot, the percent cover of that species is zero in that plot.\n\n```{r}\n#| eval: true\n#| echo: true\n#| warning: false\n#| message: false\n\ndata_plot <- data |> \n  filter(Species != \"Deadwood\") |> \n  filter(Species != \"Bare_ground\") |>\n  filter(Species != \"Litter\") |>\n  group_by(Site, Plot, Species) |>\n  summarise(Avg_cover = mean(Cover)) |> \n  mutate(Site = as.factor(Site)) |> \n  pivot_wider(names_from = Species,\n              values_from = Avg_cover,\n              values_fill = 0)\n\nkable(head(data_plot, 10))\n```\n\nThe result is a data set comprising 80 rows (one row per plot) and 132 variables (including 130 species).\n\nWe are ready to go!\n\n## Exercise 1: Does plant species diversity change with habitat type?\n\n### Step 1: Calculate Hill numbers\n\nSince we are interested in modelling the relationship between plant species diversity and habitat type, we first need to quantify plant species diversity in all plots. We will do this using Hill numbers (see tutorial on quantifying taxonomic diversity if you need to refresh your memory). To do this, we first need to calculate the [*relative*]{.underline} abundance of all species in all plots. The simplest way to do this is to create a new column called `Total` in the dataset by summing the percent cover value of all species present in each plot, and then use this information to express all species data in relative form.\n\n```{r}\n#| eval: true\n#| echo: true\n#| warning: false\n#| message: false\n\n#Create a new column called \"Total\"\n\ndata_plot <- data_plot |> \n  mutate(Total = sum(c_across(Acer_pseudoplatanus:Myrica_gale)))\n```\n\nWe can now reorganize the data into a more tidy format using the `pivot_longer()` function. What we want is a data set whose structure is similar to that of our original data, but with an extra column (`Total`). Since we have added several observations with zero values (which happens when a species is not present in a plot), we will end up with a dataset with many more rows than in our original data. But this does not matter, as we can easily filter out these values using `filter()`.\n\n```{r}\n#| eval: true\n#| echo: true\n#| warning: false\n#| message: false\n\n#Reorganise data (tidy format) and filter out zero values\n\ndata_plot <- data_plot |> \n  pivot_longer(cols = Acer_pseudoplatanus:Myrica_gale,\n               names_to = \"Species\",\n               values_to = \"Abundance\") |> \n  filter(Abundance > 0)\n```\n\nThe next step is to calculate the relative abundance of each species in all plots by dividing `Abundance` by `Total`. We will store these relative abundance values in a new column: `Rel_abundance`.\n\n```{r}\n#| eval: true\n#| echo: true\n#| warning: false\n#| message: false\n\n#Calculate species relative abundance\n\ndata_plot <- data_plot |> \n  mutate(Rel_abundance = Abundance/Total)\n```\n\nWe are now ready to calculate Hill numbers. We will do this for three values of *q* (0, 1, and 2). We can easily do this using `group_by()` and `summarise()`. Let's store this data set into a new R object called `data_hill`.\n\n```{r}\n#| eval: true\n#| echo: true\n#| warning: false\n#| message: false\n\n#Calculate Hill numbers at q=0, q=1, and q=2\n\ndata_hill <- data_plot |> \n  group_by(Site, Plot) |> \n  summarise(q0=sum(Rel_abundance^0)^(1/(1-0)),\n            q1=exp(-sum(Rel_abundance*log(Rel_abundance))),\n            q2=sum(Rel_abundance^2)^(1/(1-2)))\n```\n\nThis new dataset consists of 80 rows (one row per plot) and 5 variables:\n\n-   **Site**: the site name (4 levels: A_grassland, B_forest, C_heathland, D_peatland)\n\n-   **Plot**: the plot ID number (in each site, plots were labelled from 1 to 20)\n\n-   **q0**: the effective number of species at q=0 (species richness)\n\n-   **q1**: the effective number of species at q=1 (Hill-Shannon)\n\n-   **q2**: the effective number of species at q=2 (Hill-Simpson)\n\nTo make it easier to plot the data for multiple values of *q*, let's reorganise the dataset to have all values of *q* stored in a single column. We will store this new data set in a new R object called `data_hill_long`.\n\nUse `pivot_longer()` to reorganise the dataset and create a column called `q` to store all diversity order values (0, 1, and 2) and a column called `diversity` to store the effective number of species in each community. In `pivot_longer()`, you will need to use two extra arguments: `names_prefix = \"q\"` (this will make sure to remove the letter \"q\" from \"q0\", \"q1\", and \"q2\") and `names_transform = as.numeric` (to convert \"0\", \"1\" and \"2\" into numeric values).\n\n```{r}\n#| eval: true\n#| echo: true\n#| warning: false\n#| message: false\n\n#Reorganise data ina tidy format\n\ndata_hill_long <- data_hill |> \n  pivot_longer(q0:q2,\n               names_to = \"q\",\n               names_prefix = \"q\",\n               names_transform = as.numeric,\n               values_to = \"diversity\")\n\nkable(head(data_hill_long, 10))\n```\n\n### Step 2: Plot the data\n\nBefore fitting a statistical model to our data, let's first create a plot to help us answer our research question: Does plant species diversity change with habitat type?\n\nThis research question gives us important information about what needs to be represented. The question tells us that our graph should present data on plant species diversity (`diversity`) as a function of habitat type (`Site`). As we have calculated plant diversity for three diversity orders (q=0, q=1 and q=2), it makes sense to create a panel for each value of *q*.\n\nLet's create our plot!\n\nUsing what you have learned in the previous tutorials, create a high-quality figure that answers the research question. Feel free to personalize your plot in any way you think best communicates the results (you do not necessarily have to produce the same plot as below).\n\n```{r}\n#| eval: true\n#| echo: true\n#| warning: false\n#| message: false\n#| fig-align: center\n#| fig-dpi: 1000\n#| fig-height: 3.4\n\n#Add \"q=\" in front of diversity order values\n\ndata_hill_long$q <- paste(\"q=\", data_hill_long$q, sep = \"\")\n\n#Plot the data\n\nggplot(data_hill_long,\n       aes(x = Site,\n           y = diversity))+\n  geom_jitter(shape = 1,\n              alpha = 0.3,\n              height = 0,\n              width = 0.2)+\n  stat_summary(fun.data = \"mean_cl_boot\")+\n  theme_bw()+\n  xlab(\"\")+\n  ylab(\"Effective number of species\")+\n  facet_wrap(~q, ncol=3)+\n  theme(axis.text.x = element_text(angle=90, \n                                   vjust = 0.5,\n                                   hjust = 1))+\n  scale_colour_viridis(discrete = TRUE)\n```\n\nWhat can you already notice from this graph?\n\nDoes it look like ANOVA (ANalysis Of VAriance) assumptions are met?\n\n### Step 3: Fit a model\n\nLet's fit a statistical model to study the relationship between our response variable of interest (Plant species diversity at different values of *q*) and our two experimental factors (Site and Location). There are different ways to do this in R. First, let's check whether a ***simple linear regression model*** can correctly model our data. We will use the `lm()` function to fit this linear model (this will give us the same results as the `aov()` function). Note that each group being compared has 10 independent observations, which is not sufficient to test the assumption that the data are normally distributed at each combination of factor levels.\n\nThe syntax to fit a simple linear regression model with two predictor variables in R is as follows:\n\n`model <- lm(Response ~ Predictor1*Predictor2, data)`\n\nThe asterisks (`*`) means that we want to take the interaction between predictor variables into account (you then assume that Predictor1 and Predictor2 have non-additive effects on your response variable). Using a plus sign (`+`) instead of an asterisks would fit a model without considering an interaction between predictors (in that case, you then assume that Predictor1 and Predictor2 have additive effects on your response variable).\n\nLet's fit a linear model to plant diversity data at q=0 (i.e., species richness) using Site as an explanatory variable.\n\n```{r}\n#| eval: true \n#| echo: true \n#| warning: false \n#| message: false \n\n#Fit simple linear regression model\n#Only consider q=0 for now\n\nmodel1 <- lm(q0 ~ Site,\n             data = data_hill)\n```\n\nBefore checking model results, let's first make sure that model assumptions are met. We can check for homoscedasticity by plotting model residuals (i.e., the difference between model predictions and observations) against fitted values (i.e., model predictions). This is called a residual plot. Fitted values can be calculated using `predict()`. Residuals can be calculated using `residuals()`. Try to create such a plot using what you have learned in previous tutorials. Do you notice any pattern in this residual plot?\n\n::: panel-tabset\n## Solution (code)\n\n```{r}\n#| eval: true \n#| echo: true \n#| warning: false \n#| message: false\n#| fig-align: center\n\nplot <- data.frame(predicted = predict(model1),\n                   residuals = residuals(model1)) |> \n        ggplot(aes(x=predicted,\n                 y=residuals))+\n        geom_point()+\n        geom_hline(yintercept = 0,\n                   colour = \"red\",\n                   linetype = 2)+\n        theme_bw()+\n        xlab(\"Predicted values\")+\n        ylab(\"Residuals\")+\n        theme(axis.title.x = element_text(margin = margin(t=10)),\n              axis.title.y = element_text(margin = margin(r=10)),\n              axis.text = element_text(colour=\"black\"))\n```\n\n## Solution (plot)\n\n```{r}\n#| eval: true \n#| echo: true \n#| warning: false \n#| message: false\n#| fig-align: center\n\nplot\n```\n:::\n\nIt seems that there is a strong mean - variance relationship in our data (heteroscedasticity), which means that the model we just fitted is not the best option. A better approach is to switch to a ***generalised linear model*** (also referred to as GLM). Generalised linear models can be fitted using the `glm()` function in the *stats* package. The syntax is exactly the same as for the `lm()` function, but there is an extra argument to specify: `family`. The `family` argument allows you to describe the error distribution and the link function to be used in the model.\n\n::: callout-note\n## Relationship between `lm()` and `glm()`\n\nA simple linear regression model (`lm()`) is a special case of a gaussian generalised linear model with an identity link. This means that\n\n`lm(Response ~ Predictor1*Predictor2, data)`\n\nand\n\n`glm(Response ~ Predictor1*Predictor2, data, family=gaussian(link=\"identity\")`\n\nproduce the same results.\n:::\n\nIn the context of this course, two types of distribution are of interest to us:\n\n-   The **Poisson distribution** **to model [count]{.underline} data** (e.g., plant diversity at q=0). A Poisson distribution is characterized by the fact that its mean and variance are equal. In reality, cases of overdispersion (where the variance is greater than the mean) are frequent in ecological data. One way of solving this problem is to use a **quasi-Poisson distribution**, which corrects for overdispersion by estimating an overdispersion parameter (it assumes that the variance is a linear function of the mean). Using a log link function will also help deal with heteroscedasticity. This can be done by writing `family=quasipoisson(link=\"log\")` in `glm()`.\n\n-   The **Gamma distribution** **to model [continuous and strictly positive]{.underline} data** (e.g., plant diversity at q=1 and q=2). Negative values and zeros are not allowed with a gamma distribution. This distribution is useful to model variables such as biomass, length, etc. Using a log link function will also help deal with heteroscedasticity. This can be done by writing `family=Gamma(link=\"log\")` in `glm()`.\n\nLet's fit a new model (this time a GLM) to our species richness data (q=0).\n\n```{r}\n#| eval: true \n#| echo: true \n#| warning: false \n#| message: false \n\n#Fit a generalised linear model with a quasipoisson distribution\n\nmodel2 <- glm(q0 ~ Site,\n              data = data_hill,\n              family = quasipoisson(link=\"log\"))\n```\n\nBefore checking model results, let's first create a residual plot. What do you notice? What's new in this residual plot?\n\n::: panel-tabset\n## Solution (code)\n\n```{r}\n#| eval: true \n#| echo: true \n#| warning: false \n#| message: false\n#| fig-align: center\n\nplot <- data.frame(predicted = predict(model2),\n                   residuals = residuals(model2)) |> \n        ggplot(aes(x=predicted,\n                 y=residuals))+\n        geom_point()+\n        geom_hline(yintercept = 0,\n                   colour = \"red\",\n                   linetype = 2)+\n        theme_bw()+\n        xlab(\"Predicted values\")+\n        ylab(\"Pearson residuals\")+\n        theme(axis.title.x = element_text(margin = margin(t=10)),\n              axis.title.y = element_text(margin = margin(r=10)),\n              axis.text = element_text(colour=\"black\"))\n```\n\n## Solution (plot)\n\n```{r}\n#| eval: true \n#| echo: true \n#| warning: false \n#| message: false\n#| fig-align: center\n\nplot\n```\n:::\n\nLet's now take a look at model outputs. You can do this using `summary()`. This output contains a wealth of useful information. The coefficient table gives you the coefficients of the model. When looking at the results of the statistical tests, it seems that most of the coefficients in the equation above can be considered significantly different from zero (marked with a dot or an asterisks).\n\n::: panel-tabset\n## Solution (code)\n\n```{r}\n#| eval: true \n#| echo: true \n#| warning: false \n#| message: false \n\noutput <- summary(model2)\n```\n\n## Solution (output)\n\n```{r}\n#| eval: true \n#| echo: true \n#| warning: false \n#| message: false\n\noutput\n```\n:::\n\nGLM models do not return any R² values (like for simple linear regression models). The closest we can get is to calculate the explained deviance:\n\n$$\nExplainedDeviance = 100 \\times \\frac{NullDeviance - ResidualDeviance}{NullDeviance}\n$$\n\n```{r}\n#| eval: true \n#| echo: true \n#| warning: false \n#| message: false \n\nnull_deviance <- summary(model2)$null.deviance\nresidual_deviance <- summary(model2)$deviance\n\nexplained_deviance <- 100*(null_deviance-residual_deviance)/null_deviance\n```\n\nThe explanatory variables included in the model explain `r round(explained_deviance, 1)`% of the variation in plant species richness (q=0).\n\n### Step 4: Compare group means\n\nYou can use the `Anova()` function in the *car* package to produce an ANOVA table (in this case, an analysis of deviance table). This table shows that plant species richness strongly differs between sites.\n\n::: panel-tabset\n## Solution (code)\n\n```{r}\n#| eval: true \n#| echo: true \n#| warning: false \n#| message: false \n\ntable <- Anova(model2)\n```\n\n## Solution (table)\n\n```{r}\n#| eval: true \n#| echo: true \n#| warning: false \n#| message: false \n\ntable\n```\n:::\n\nTo determine where the differences in plant species richness lie between the four different sites, we need to perform a posthoc test. The `emmeans()` function in the *emmeans* R package is a good option for this. For the `emmeans()` function, we will need to specify a value for the following arguments:\n\n-   `object` (the object containing the fitted model)\n-   `specs` (a character vector specifying the names of the predictors for which levels must be compared). In this example, this is `Site`.\n-   `by` (a character vector specifying the names of the predictors to condition on). We will not need this argument in this case because our model has only one explanatory variable, but this argument is particularly useful if the model includes an interaction term between two explanatory variables.\n-   `contr` (a character value specifying the contrasts to be added). We will use pairwise contrasts (i.e., all possible pairs of groups will be compared).\n\nTo check the results of the posthoc test, we will then call a `summary()` function on the object produced by `emmeans()` . In `summary()`, we will use the `type` argument to specify that we want model predictions to be on the same scale as the original data (not log scale, but original scale).\n\n::: panel-tabset\n## Solution (code)\n\n```{r}\n#| eval: true \n#| echo: true \n#| warning: false \n#| message: false \n\ntable <- summary(emmeans(object = model2, \n                         specs = \"Site\", \n                         contr = \"pairwise\"), \n         type=\"response\")\n```\n\n## Solution (table)\n\n```{r}\n#| eval: true \n#| echo: true \n#| warning: false \n#| message: false \n\ntable\n```\n:::\n\nWhat can you conclude from this posthoc test?\n\n::: callout-important\n## Challenge to do at home\n\nYou can repeat all steps 3 and 4 for plant species diversity at q=1 and q=2. The only difference will be that you will need to use a different distribution family to model the data (since the diversity values at q=1 and q=2 are continuous and strictly positive). A Gamma distribution should do the trick.\n\nGive it a try!\n:::\n\n```{r}\n#| eval: true \n#| echo: false \n#| warning: false \n#| message: false \n\nmodel3 <- glm(q1 ~ Site,\n              data = data_hill,\n              family = Gamma(link=\"log\"))\n\nmodel4 <- glm(q2 ~ Site,\n              data = data_hill,\n              family = Gamma(link=\"log\"))\n\ntable3 <- summary(emmeans(object = model3, \n                         specs = \"Site\", \n                         contr = \"pairwise\"), \n          type=\"response\")\n\ntable4 <- summary(emmeans(object = model4, \n                         specs = \"Site\", \n                         contr = \"pairwise\"), \n          type=\"response\")\n```\n\n### Step 5: Add posthoc test results to the graph\n\nWe can add posthoc test results to a graph by adding annotations. This is often done by adding letters next to the groups being compared. Groups that do not share a common letter are considered statistically significantly different from each other (p \\< 0.05). We can easily add these letters to our graph in two steps:\n\n-   Start by creating a data frame (called `annotations` in the code below) that contains all the information that *ggplot2* needs to add the annotations to your graph. In our example, this data frame should have as many rows as annotations to add to the graph and must contain the following columns:\n\n    -   **Site**: the site name (4 levels: A_grassland, B_forest, C_heathland, D_peatland). Use the same column name as in `data_hill_long`.\n    -   **q**: the diversity order. Use the same column name as in `data_hill_long`.\n    -   **y**: the vertical coordinates where annotations should be added. You can freely choose the name of this column.\n    -   **Label**: the annotations to be added to the graph. You can freely choose the name of this column.\n\n-   Once this is done, add an extra layer to your ggplot object using `geom_text()`.\n\n```{r}\n#| eval: true\n#| echo: true\n#| warning: false\n#| message: false\n#| fig-align: center\n#| fig-dpi: 1000\n#| fig-height: 3.4\n\n#Create table with annotations\n\nannotations <- data.frame(Site=rep(unique(data_hill_long$Site), 3),\n                          q=rep(unique(data_hill_long$q), each=4),\n                          y=c(rep(50, 4),\n                              rep(30, 4),\n                              rep(23, 4)),\n                          Label=c(\"a\", \"b\", \"b\", \"a\",\n                                  \"a\", \"b\", \"b\", \"a\",\n                                  \"a\", \"b\", \"b\", \"a\"))\n\n#Plot the data\n\nggplot(data_hill_long,\n       aes(x = Site,\n           y = diversity))+\n  geom_jitter(shape = 1,\n              alpha = 0.3,\n              height = 0,\n              width = 0.2)+\n  stat_summary(fun.data = \"mean_cl_boot\")+\n  theme_bw()+\n  xlab(\"\")+\n  ylab(\"Effective number of species\")+\n  facet_wrap(~q, ncol=3)+\n  theme(axis.text.x = element_text(angle=90, \n                                   vjust = 0.5,\n                                   hjust = 1))+\n  scale_colour_viridis(discrete = TRUE)+\n  geom_text(data=annotations,\n            aes(y=y,\n                x=Site,\n                label=Label))\n```\n\n## Exercise 2: Non-metric multidimensional scaling\n\n### Step 1: Choose a measure of association\n\n**Non-metric multidimensional scaling** (NMDS) is a technique often used in ecological research to visualise differences (or (dis)similarities) in species composition between ecological communities.\n\nThe first step is to choose a measure of association and calculate a dissimilarity matrix. This dissimilarity matrix will have as many rows and columns as ecological communities to be compared. The help page of the `vegdist()` function of the *vegan* package lists a number of dissimilarity indices for ecologists wishing to quantify dissimilarity in species composition between communities. You can access this help page by running `?vegdist` in your R console (a detailed discussion of the advantages and disadvantages of each dissimilarity index is beyond the scope of this tutorial). The Bray-Curtis dissimilarity is usually good at detecting ecological gradients (see `?vegdist`) and is often used as default when performing NMDS. This is the dissimilarity index we are going to use in this tutorial too.\n\n### Step 2: Organise your data\n\nTo obtain the dissimilarity matrix required for NMDS, we first need to reorganise our data so that each species has its own column and each ecological community has its own row (i.e., a site-by-species matrix). We already wrote the code to do this at the beginning of this tutorial.\n\n```{r}\n#| eval: true \n#| echo: true \n#| warning: false \n#| message: false \n\ndata_nmds <- data |> \n  filter(Species != \"Deadwood\") |> \n  filter(Species != \"Bare_ground\") |>\n  filter(Species != \"Litter\") |>\n  group_by(Site, Plot, Species) |>\n  summarise(Avg_cover = mean(Cover)) |> \n  mutate(Site = as.factor(Site)) |> \n  pivot_wider(names_from = Species,\n              values_from = Avg_cover,\n              values_fill = 0)\n\nkable(head(data_nmds, 10))\n```\n\n### Step 3: Perform the NMDS\n\nNow that our community dataset has the right format, we can perform the NMDS using the `metaMDS()` function of the *vegan* package. The following arguments are of particular importance:\n\n-   `comm`: the community data (only select the species columns).\n-   `distance`: a character value for the dissimilarity index used. Use `distance=\"bray\"` for the Bray-Curtis dissimilarity index.\n-   `k`: the number of dimensions to compute. Let's start with `k=2` (we want to produce a 2D plot).\n-   `trymax`: the maximum number of random starts in search of a stable solution. The NMDS algorithm iteratively searches for a stable solution (numerical optimisation methods). Increasing the value of this argument can help reaching a stable solution.\n\nWe will keep the default values for all other arguments. Store the results in an object named `nmds`. Do not forget to set a seed (using `set.seed()` for reproducibility).\n\n```{r}\n#| eval: true \n#| echo: true \n#| warning: false \n#| message: false \n\nset.seed(123)\n\nnmds <- metaMDS(comm = data_nmds[,3:ncol(data_nmds)],\n                distance = \"bray\",\n                k = 2,\n                trymax = 1000)\n```\n\n### Step 4: Check NMDS results\n\nThe main goal of NMDS is to visualise a dissimilarity matrix in a lower (typically 2D) dimensional space. Contrary to principal coordinate analysis (PCoA), which aims to create a plot in which distances between points match the original dissimilarities as closely as possible, NMDS focuses on representing the order, or ranking, of the original dissimilarities as closely as possible (Zuur AF, Ieno EN, Smith GM. 2007. *Analysing ecological data*. Springer.).\n\nThe first way to assess the quality of the display is to look at a parameter called \"stress\". You can extract it from the `nmds` object created earlier using `nmds$stress`. In our example, the stress value is equal to `r round(nmds$stress, 3)`. Zuur et al (2007) provided some guidelines on how to interpret stress values (usually, the lower the stress value, the better):\n\n-   stress \\< 0.05: Excellent configuration\n-   stress between 0.05 and 0.1: Good configuration\n-   stress between 0.1 and 0.2: Be careful with interpretation\n-   stress between 0.2 and 0.3: Problems start. Consider increasing the number of dimensions (`k`).\n-   stress above 0.3: Poor representation. Increase the number of dimensions (`k`).\n\nAnother way to assess the quality of the configuration is to create a Shepard plot. A Shepard plot shows the relationship between ordination distances (i.e., distances in the configuration produced by the NMDS) and original distances. You can produce a Shepard plot using the `stressplot()` function in *vegan*. What can you conclude from this Shepard plot?\n\n```{r}\n#| eval: true \n#| echo: true \n#| warning: false \n#| message: false\n#| fig-align: center\n\nstressplot(nmds)\n```\n\n### Step 5: Visualise NMDS results\n\nNMDS results are stored in our `nmds` object. You can extract the coordinates of each community using `nmds$points`. To make it easier to work with *ggplot2*, we will add these coordinates to our data frame (`data_nmds`).\n\n```{r}\n#| eval: true \n#| echo: true \n#| warning: false \n#| message: false\n\ndata_nmds <- cbind(data_nmds, nmds$points)\n\nkable(head(data_nmds, 10))\n```\n\nWe now have everything we need to plot the results of the NMDS using *ggplot2*:\n\n-   Create a plot displaying MDS1 on the horizontal axis and MDS2 on the vertical axis.\n-   Use a specific colour for each habitat type (mind colour-blind people!).\n-   Add an informative legend to your graph.\n-   Add an annotation on the top left corner of your graph for the stress value. Use `geom_text()` to do that.\n\nWhat can you conclude from this NMDS?\n\n```{r}\n#| eval: true \n#| echo: true \n#| warning: false \n#| message: false\n#| fig-align: center\n#| fig-dpi: 1000\n\ndata_nmds |> \n  ggplot(aes(x = MDS1,\n             y = MDS2,\n             colour = Site))+\n  geom_point(size=2.5)+\n  theme_bw()+\n  scale_colour_viridis(name = \"Habitat type\",\n                       discrete = TRUE,\n                       option = \"D\")+\n  theme(axis.text = element_text(colour=\"black\"),\n        axis.title.x = element_text(margin = margin(t=10)),\n        axis.title.y = element_text(margin = margin(r=10)))+\n  xlab(\"NMDS1\")+\n  ylab(\"NMDS2\")+\n  geom_text(data=data.frame(x=min(data_nmds$MDS1),\n                            y=max(data_nmds$MDS2),\n                            label=paste(\"Stress = \", \n                                        round(nmds$stress, 3), \n                                        sep=\"\")), \n            aes(x = x, \n                y = y, \n                label = label),\n            hjust = 0.1, \n            vjust = 0, \n            inherit.aes = FALSE)\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"svg","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":true,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"toc-depth":5,"output-file":"data_analysis.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.433","editor":"visual","editor_options":{"chunk_output_type":"console"},"theme":{"light":["cosmo","theme-light.scss"],"dark":["cosmo","theme-dark.scss"]},"code-copy":true,"code-summary":"Show me the R code","fig-cap-location":"bottom","title":"Tutorial 5: Data analysis in R","author":[{"name":"Benjamin Delory","orcid":"0000-0002-1190-8060","email":"b.m.m.delory@uu.nl","affiliations":[{"name":"Environmental sciences group, Copernicus institute of sustainable development, Utrecht University"}]}]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}