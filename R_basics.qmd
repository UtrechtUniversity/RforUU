---
title: "R basics"
author:
  - name: Benjamin Delory
    orcid: 0000-0002-1190-8060
    email: b.m.m.delory@uu.nl
    affiliations:
      - name: Environmental sciences group, Copernicus institute of sustainable development, Utrecht University
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---

## Commenting

You can add comments to your R script using the hash tag symbol: `#`

Every line that starts with `#` will be ignored by R and will not be executed.

```{r}
#| eval: true 
#| echo: true 
#| code-fold: false  

#This line of code is a comment and will be ignored by R when running the code
```

::: callout-important
## Always comment your R script!

We strongly advise you to add comments to your R code. At the very least, these comments should indicate ***why*** you have written each section of your code. It can also be useful to add information about the ***what*** and ***how***. These comments can save a lot of time if you need to go back over your code after a while or, even more difficult, if someone else needs to go through your code and understand what you've done.
:::

## Creating R objects

::: callout-important
## The assignment operator

New R objects are created using the assigment operator: `<-`

You can think of this assignment operator as an arrow that puts what's on its right side into an R object located on its left side.

For instance, let's create an object called `x` that contains the value 2.

```{r}
#| eval: true
#| echo: true
#| code-fold: false

#Create object
x <- 2

#Show content of R object
x
```

::: callout-tip
## RStudio shortcut

Press Alt and the minus sign on your keyboard (Alt+-) to quickly write the assignment operator.
:::
:::

### Scalars

A scalar is a quantity that can only hold one value at a time. Here are the most common types of scalars in R:

-   *Numeric*: numbers with a decimal value (e.g., 17.8)
-   *Integer*: numbers without a decimal value (e.g., 18)
-   *Character*: a letter or a combination of letters. Character strings must be enclosed by quotes in your R code.
-   *Factor*: data type used in statistical modelling to specify what are the factors in the model
-   *Logical*: a logical variable can be either `TRUE` or `FALSE`

You can check the data type of an R object using the `class()` function.

```{r}
#| eval: true
#| echo: true
#| code-fold: false

x <- 2
class(x)
```

### Vectors

A vector is a sequence of data elements of the same type. Vectors can be created using the `c()` function.

```{r}
#| eval: true
#| echo: true
#| code-fold: false

#Numeric vector
x1 <- c(1,2,3,4,5)
x1 <- c(1:5)

#Character vector
x <- c("control", "treatment")

#Logical vector
x <- c(TRUE, TRUE, FALSE)

```

You can check how many elements there are in a vector using the `length()` function.

```{r}
#| eval: true
#| echo: true
#| code-fold: false

length(x1)
```

### Matrices

A matrix is an ensemble of data elements of the same type arranged in a 2D layout (i.e., like a table). Matrices can be created using the `matrix()` function.

```{r}
#| eval: true
#| echo: true
#| code-fold: false

#Generate 25 random numbers between 0 and 1 from a uniform distribution
x2 <- runif(25)

#Arrange these random numbers into a matrix with 5 rows and 5 columns
x2 <- matrix(x2,
            ncol = 5,
            nrow = 5)

#View matrix
x2
```

You can check the size of a matrix using the `dim()` function. The first element of the output is the number of rows. The second element of the output is the number of columns.

```{r}
#| eval: true
#| echo: true
#| code-fold: false

dim(x2)
```

You can also extract the number of rows and columns using `nrow()` and `ncol()`, respectively.

```{r}
#| eval: true
#| echo: true
#| code-fold: false

nrow(x2)
ncol(x2)
```

### Data frames

A data frame is an ensemble of data elements arranged in a 2D layout (i.e., like a table). Different columns of a data frame can contain different types of data (character, logical, numeric, etc.). It is probably the most common data structure used when analysing ecological data. Data frames can be created using the `data.frame()` function.

```{r}
#| eval: true
#| echo: true
#| code-fold: false

#Create data frame
x3 <- data.frame(Var1=c(1:6),
                 Var2=c("R", "i", "s", "f", "u", "n"),
                 Var3=c(TRUE, TRUE, FALSE, FALSE, TRUE, FALSE))

#View data frame
x3
```

The functions `dim()`, `ncol()`, and `nrow()` can also be used on data frames.

### Lists

A list is a vector containing other objects (vectors, matrices, data frames, other lists, etc.). It can contain elements of various data types. Lists can be created using the `list()` function.

```{r}
#| eval: true
#| echo: true
#| code-fold: false

#Create a list
x4 <- list(x1, x2, x3)

#View list
x4
```

The `length()` function can be used to check how many data elements there are in a list.

```{r}
#| eval: true
#| echo: true
#| code-fold: false

length(x4)
```

## Indexing

One of the main advantages of R is that it is very easy to extract any given value from a data set. This is called indexing. Let's have a look at a few examples.

### Vectors

To extract the *i^th^* value of a vector object called `x`, you should write `x[i]`.

```{r}
#| eval: true
#| echo: true
#| code-fold: false

#Extract the third value of the x1 object 
#x1 is a vector

x1[3]
```

### Matrices and data frames

To extract the value located at the intersection between the *i^th^* row and *j^th^* column of a matrix or a data frame object called `x`, you should write `x[i,j]`.

```{r}
#| eval: true
#| echo: true
#| code-fold: false

#Extract the value at the intersection of row 2 and column 3 in the x2 object
#x2 is a matrix

x2[2,3]
```

With a data frame, there are a couple of other options to extract data from specific columns. One option is to use the dollar symbol (`$`) followed by the column name.

```{r}
#| eval: true
#| echo: true
#| code-fold: false

#Extract all the values stored in the second column of the x3 object
#x3 is a data frame

x3$Var2
```

Note that the following code would also work and would produce the same result. To extract all the values from a specific column, simply leave the square brackets empty before the comma. It is important to specify the name of the column (in quotes), otherwise you will simply extract all the values from your data frame.

```{r}
#| eval: true
#| echo: true
#| code-fold: false

#Extract all the values stored in the second column of the x3 object
#x3 is a data frame

x3[,"Var2"]
```

If you want to subset a matrix or a data frame called `x` (i.e., selecting only specifics rows and columns), you should write:

`x[rows to select, columns to select]`

```{r}
#| eval: true
#| echo: true
#| code-fold: false

#Extract only the values located between rows 2 and 4 
#in the second column of the x3 object
#x3 is a data frame

x3[2:4, 2]
```

Note that writing `2:4` means "from index 2 to index 4". It is exactly the same as writing `c(2,3,4)`.

### Lists

To extract the *i^th^* element of a list object called `x`, you should write `x[[i]]`.

```{r}
#| eval: true
#| echo: true
#| code-fold: false

#Extract the second element of the x4 object
#x4 is a list

x4[[2]]
```
