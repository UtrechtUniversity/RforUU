theme(axis.title.x = element_text(margin = margin(t=10)), #t means top
axis.title.y = element_text(margin = margin(r=10)))+ #r means right
facet_wrap(~threatened,
nrow=1,
ncol=2)+
geom_smooth(span=1.5,
aes(colour = threatened))+
scale_colour_viridis(option="D")
data_wassen |>
ggplot(aes(x = K_median,
y = P_median))+
geom_point(shape=1)+
theme_bw()+
xlab("Median K concentration (mg/g)")+
ylab("Median P concentration (mg/g)")+
theme(axis.title.x = element_text(margin = margin(t=10)), #t means top
axis.title.y = element_text(margin = margin(r=10)))+ #r means right
facet_wrap(~threatened,
nrow=1,
ncol=2)+
geom_smooth(span=1.5,
aes(colour = threatened))+
scale_colour_viridis(option="D",
discrete = TRUE)
#| eval: true
#| echo: true
#| warning: false
#| message: false
data_wassen |>
mutate(threatened = replace(threatened, threatened == "No", "Non-threatened")) |>
mutate(threatened = replace(threatened, threatened == "Yes", "Threatened")) |>
ggplot(aes(x = K_median,
y = P_median))+
geom_point(shape=1)+
theme_bw()+
xlab("Median K concentration (mg/g)")+
ylab("Median P concentration (mg/g)")+
theme(axis.title.x = element_text(margin = margin(t=10)), #t means top
axis.title.y = element_text(margin = margin(r=10)))+ #r means right
facet_wrap(~threatened,
nrow=1,
ncol=2)+
geom_smooth(span=1.5,
aes(colour = threatened))+
scale_colour_viridis(option="D",
discrete = TRUE)
data_wassen |>
mutate(threatened = replace(threatened, threatened == "No", "Non-threatened")) |>
mutate(threatened = replace(threatened, threatened == "Yes", "Threatened")) |>
ggplot(aes(x = K_median,
y = P_median))+
geom_point(shape=1)+
theme_bw()+
xlab("Median K concentration (mg/g)")+
ylab("Median P concentration (mg/g)")+
theme(axis.title.x = element_text(margin = margin(t=10)), #t means top
axis.title.y = element_text(margin = margin(r=10)),
legend.position="none")+ #r means right
facet_wrap(~threatened,
nrow=1,
ncol=2)+
geom_smooth(span=1.5,
aes(colour = threatened))+
scale_colour_viridis(option="D",
discrete = TRUE)
data_wassen |>
mutate(threatened = replace(threatened, threatened == "No", "Non-threatened")) |>
mutate(threatened = replace(threatened, threatened == "Yes", "Threatened")) |>
ggplot(aes(x = K_median,
y = P_median))+
geom_point(shape=1)+
theme_bw()+
xlab("Median K concentration (mg/g)")+
ylab("Median P concentration (mg/g)")+
theme(axis.title.x = element_text(margin = margin(t=10)), #t means top
axis.title.y = element_text(margin = margin(r=10)),
legend.position="none",
axis.text = element_text(colour = "black"))+ #r means right
facet_wrap(~threatened,
nrow=1,
ncol=2)+
geom_smooth(span=1.5,
aes(colour = threatened))+
scale_colour_viridis(option="D",
discrete = TRUE)
#| eval: false
#| echo: true
#| warning: false
#| message: false
final_plot <- data_wassen |>
mutate(threatened = replace(threatened, threatened == "No", "Non-threatened")) |>
mutate(threatened = replace(threatened, threatened == "Yes", "Threatened")) |>
ggplot(aes(x = K_median,
y = P_median))+
geom_point(shape=1)+
theme_bw()+
xlab("Median K concentration (mg/g)")+
ylab("Median P concentration (mg/g)")+
theme(axis.title.x = element_text(margin = margin(t=10)), #t means top
axis.title.y = element_text(margin = margin(r=10)),
legend.position="none",
axis.text = element_text(colour = "black"))+ #r means right
facet_wrap(~threatened,
nrow=1,
ncol=2)+
geom_smooth(span=1.5,
aes(colour = threatened))+
scale_colour_viridis(option="D",
discrete = TRUE)
ggsave(filename = "Scatterplot_Wassen.png",
plot = plot_final,
dpi = 1000,
width = 15,
height=10,
units="cm")
#| eval: false
#| echo: true
#| warning: false
#| message: false
plot_final <- data_wassen |>
mutate(threatened = replace(threatened, threatened == "No", "Non-threatened")) |>
mutate(threatened = replace(threatened, threatened == "Yes", "Threatened")) |>
ggplot(aes(x = K_median,
y = P_median))+
geom_point(shape=1)+
theme_bw()+
xlab("Median K concentration (mg/g)")+
ylab("Median P concentration (mg/g)")+
theme(axis.title.x = element_text(margin = margin(t=10)), #t means top
axis.title.y = element_text(margin = margin(r=10)),
legend.position="none",
axis.text = element_text(colour = "black"))+ #r means right
facet_wrap(~threatened,
nrow=1,
ncol=2)+
geom_smooth(span=1.5,
aes(colour = threatened))+
scale_colour_viridis(option="D",
discrete = TRUE)
ggsave(filename = "Scatterplot_Wassen.png",
plot = plot_final,
dpi = 1000,
width = 15,
height=10,
units="cm")
#| eval: true
#| echo: false
#| warning: false
#| message: false
unlink("Data_POEM", recursive = TRUE)
file.remove("Data_POEM_Paper1_Alonso-Crespo_et_al_2024-v1.0.zip")
library(sf)
library(raster)
library(rgdal)
install.packages("rgdal")
library(rgdal)
locations_sf <- st_read(dsn = "Data/Locations_EFR2.gpkg")
locations_sf <- st_read(dsn = "Data_ggplot2/Locations_EFR2.gpkg")
ggplot()+geom_sf(data = locations_sf)+theme_minimal()
GWT<-raster("Data_ggplot2/GWT_high.tif")
GWT_df <- as.data.frame(GWT, xy = TRUE)
KI2_df <- as.data.frame(KI2, xy = TRUE)
ggplot()+
geom_raster(data = GWT_df , aes(x = x, y = y, fill = GWT_high))+
scale_fill_gradient2(low = "blue", mid = "white", high = "red",
midpoint = 2,
transform = "pseudo_log",
na.value = "transparent") +
geom_sf(data = locations_sf)+
theme_minimal()
soil_sf <- st_read(dsn = "Data_ggplot2/Soil_BRO.gpkg")
# Transform VEREENV variable
soil_sf$VEREENV <- ifelse(soil_sf$VEREENV == "DV", "Peat",
ifelse(soil_sf$VEREENV == "V", "Peat",
ifelse(soil_sf$VEREENV == "M", "Clay",
ifelse(soil_sf$VEREENV == "Z", "Sand",soil_sf$VEREENV))))
ggplot() +
geom_sf(data = soil_sf, aes(fill = VEREENV),alpha = 0.5) +
geom_sf(data = locations_sf) +
scale_fill_manual(name = "Soil Type",
values = c("Peat" = "black", "Sand" = "yellow", "Clay" = "brown")
,na.value = "lightgrey") +
theme_minimal()
install.packages('mapview')
library(mapview)
mapviewOptions(fgb = FALSE)
Map<-mapview(locations_sf,map.types = c("OpenStreetMap"))+
mapview(soil_sf, zcol = "VEREENV",col.regions = c("brown", "lightgrey", "black", "yellow"), alpha.regions = 0.3,stroke = FALSE, map.types = c("OpenStreetMap"))
Map
View(locations_sf)
gc()
#| eval: true
#| echo: true
#| warning: false
#| message: false
#Read field site locations
locations_sf <- st_read(dsn = "Data_ggplot2/Locations_EFR.gpkg")
#Create a ggplot
ggplot(data = locations_sf)+
geom_sf()+
theme_minimal()
GWT<-raster("Data_ggplot2/GWT_high.tif")
GWT_df <- as.data.frame(GWT, xy = TRUE)
View(GWT_df)
#| eval: true
#| echo: true
#| warning: false
#| message: false
#Create RasterLayer object
GWT<-raster("Data_ggplot2/GWT_high.tif")
#Convert to data frame
GWT_df <- as.data.frame(GWT,
xy = TRUE)
#Plot raster and location data
ggplot()+
geom_raster(data = GWT_df,
aes(x = x,
y = y,
fill = GWT_high))+
geom_sf(data = locations_sf)+
theme_minimal()
ggplot()+
geom_raster(data = GWT_df , aes(x = x, y = y, fill = GWT_high))+
scale_fill_gradient2(low = "blue", mid = "white", high = "red",
midpoint = 2,
transform = "pseudo_log",
na.value = "transparent") +
geom_sf(data = locations_sf)+
theme_minimal()
ggplot()+
geom_raster(data = GWT_df , aes(x = x, y = y, fill = GWT_high))+
scale_fill_gradient2(low = "blue", mid = "white", high = "red",
midpoint = 2,
#transform = "pseudo_log",
na.value = "transparent") +
geom_sf(data = locations_sf)+
theme_minimal()
ggplot()+
geom_raster(data = GWT_df , aes(x = x, y = y, fill = GWT_high))+
# scale_fill_gradient2(low = "blue", mid = "white", high = "red",
#                      midpoint = 2,
#                      #transform = "pseudo_log",
#                      na.value = "transparent") +
scale_fill_gradient(low = "blue", high = "red",
#transform = "pseudo_log",
na.value = "transparent") +
geom_sf(data = locations_sf)+
theme_minimal()
#| eval: true
#| echo: true
#| warning: false
#| message: false
#Create RasterLayer object
GWT<-raster("Data_ggplot2/GWT_high.tif")
#Convert to data frame
GWT_df <- as.data.frame(GWT,
xy = TRUE)
#Plot raster and location data
ggplot()+
geom_raster(data = GWT_df,
aes(x = x,
y = y,
fill = GWT_high))+
geom_sf(data = locations_sf)+
theme_minimal()+
scale_fill_gradient2(low = "blue",
mid = "white",
high = "red",
midpoint = 2,
transform = "pseudo_log",
na.value = "transparent")
#Plot raster and location data
ggplot()+
geom_raster(data = GWT_df,
aes(x = x,
y = y,
fill = GWT_high))+
geom_sf(data = locations_sf)+
theme_minimal()+
scale_fill_gradient2(low = "blue",
mid = "white",
high = "red",
midpoint = 2,
transform = "pseudo_log",
na.value = "transparent")+
theme(legend.title = element_text(label = "Test"))
#Plot raster and location data
ggplot()+
geom_raster(data = GWT_df,
aes(x = x,
y = y,
fill = GWT_high))+
geom_sf(data = locations_sf)+
theme_minimal()+
scale_fill_gradient2("Test",
low = "blue",
mid = "white",
high = "red",
midpoint = 2,
transform = "pseudo_log",
na.value = "transparent")+
```
#Plot raster and location data
ggplot()+
geom_raster(data = GWT_df,
aes(x = x,
y = y,
fill = GWT_high))+
geom_sf(data = locations_sf)+
theme_minimal()+
scale_fill_gradient2("Test",
low = "blue",
mid = "white",
high = "red",
midpoint = 2,
transform = "pseudo_log",
na.value = "transparent")
#Plot raster and location data
ggplot()+
geom_raster(data = GWT_df,
aes(x = x,
y = y,
fill = GWT_high))+
geom_sf(data = locations_sf)+
theme_minimal()+
scale_fill_gradient2("Ground/nwater/ntable",
low = "blue",
mid = "white",
high = "red",
midpoint = 2,
transform = "pseudo_log",
na.value = "transparent")
#Plot raster and location data
ggplot()+
geom_raster(data = GWT_df,
aes(x = x,
y = y,
fill = GWT_high))+
geom_sf(data = locations_sf)+
theme_minimal()+
scale_fill_gradient2("Ground\nwater\ntable",
low = "blue",
mid = "white",
high = "red",
midpoint = 2,
transform = "pseudo_log",
na.value = "transparent")
#Plot raster and location data
ggplot()+
geom_raster(data = GWT_df,
aes(x = x,
y = y,
fill = GWT_high))+
geom_sf(data = locations_sf)+
theme_minimal()+
scale_fill_gradient2(name = "Ground\nwater\ntable",
low = "blue",
mid = "white",
high = "red",
midpoint = 2,
transform = "pseudo_log",
na.value = "transparent",
breaks = c(0, 2, 10, 20))
#Plot raster and location data
ggplot()+
geom_raster(data = GWT_df,
aes(x = x,
y = y,
fill = GWT_high))+
geom_sf(data = locations_sf)+
theme_minimal()+
scale_fill_gradient2(name = "Ground\nwater\ntable",
low = "blue",
mid = "white",
high = "red",
midpoint = 2,
transform = "pseudo_log",
na.value = "transparent",
breaks = c(0, 2, 10, 40))
#Plot raster and location data
ggplot()+
geom_raster(data = GWT_df,
aes(x = x,
y = y,
fill = GWT_high))+
geom_sf(data = locations_sf)+
theme_minimal()+
scale_fill_gradient2(name = "Ground\nwater\ntable",
low = "blue",
mid = "white",
high = "red",
midpoint = 2,
transform = "pseudo_log",
na.value = "transparent",
breaks = c(-10, 0, 2, 10, 40))
#Plot raster and location data
ggplot()+
geom_raster(data = GWT_df,
aes(x = x,
y = y,
fill = GWT_high))+
geom_sf(data = locations_sf)+
theme_minimal()+
scale_fill_gradient2("Ground\nwater\ntable",
low = "blue",
mid = "white",
high = "red",
midpoint = 2,
transform = "pseudo_log",
na.value = "transparent",
breaks = c(0, 2, 10, 40))+
ylab("Latitude")+
xlab("Longitude")+
theme(axis.title.x = element_text(margin = margin(t=10)),
axis.title.y = element_text(margin = margin(r=10)))
soil_sf <- st_read(dsn = "Data_ggplot2/Soil_BRO.gpkg")
soil_sf <- st_read(dsn = "Data_ggplot2/Soil_BRO.gpkg")
View(soil_sf)
colnames(soil_sf)
#| eval: true
#| echo: true
#| warning: false
#| message: false
soil_sf <- soil_sf |>
mutate(VEREENV = replace(VEREENV, VEREENV %in% c("DV", "V"), "Peat")) |>
mutate(VEREENV = replace(VEREENV, VEREENV == "M", "Clay")) |>
mutate(VEREENV = replace(VEREENV, VEREENV == "Z", "Sand"))
ggplot() +
geom_sf(data = soil_sf,
aes(fill = VEREENV),
alpha = 0.5) +
geom_sf(data = locations_sf) +
scale_fill_manual(name = "Soil Type",
values = c("Peat" = "black",
"Sand" = "yellow",
"Clay" = "brown"),
na.value = "transparent") +
theme_minimal()+
ylab("Latitude")+
xlab("Longitude")+
theme(axis.title.x = element_text(margin = margin(t=10)),
axis.title.y = element_text(margin = margin(r=10)))
install.packages("mapview")
library(mapview)
#| eval: true
#| echo: true
#| warning: false
#| message: false
#| code-fold: false
mapviewOptions(fgb = FALSE)
my_map <- mapView(x = locations_sf,
map.types = c("OpenStreetMap"))+
mapView(x = soil_sf,
zcol = "VEREENV",
col.regions = c("brown",
"transparent",
"black",
"yellow"),
alpha.regions = 0.3,
stroke = FALSE,
map.types = c("OpenStreetMap"))
my_map
my_map <- mapView(x = locations_sf,
map.types = c("OpenStreetMap"))+
mapView(x = soil_sf,
zcol = "VEREENV",
col.regions = c("brown",
"transparent",
"black",
"yellow"),
alpha.regions = 0.4,
stroke = FALSE,
map.types = c("OpenStreetMap"))
my_map
10/cm(1)
15/cm(1)
#Read field site locations
locations_sf <- st_read(dsn = "Data_ggplot2/Locations_EFR.gpkg",
quiet = TRUE)
#| eval: true
#| echo: false
#| warning: false
#| message: false
generateRPointShapes<-function(){
oldPar<-par()
par(font=2, mar=c(0.5,0,0,0))
y=rev(c(rep(1,6),rep(2,5), rep(3,5), rep(4,5), rep(5,5)))
x=c(rep(1:5,5),6)
plot(x, y, pch = 0:25, cex=1.5, ylim=c(1,5.5), xlim=c(1,6.5),
axes=FALSE, xlab="", ylab="", bg="#FFCD00")
text(x, y, labels=0:25, pos=3)
par(mar=oldPar$mar,font=oldPar$font )
}
generateRPointShapes()
#| eval: true
#| echo: false
#| warning: false
#| message: false
generateRPointShapes<-function(){
oldPar<-par()
par(font=2, mar=c(0.5,0,0,0))
y=rev(c(rep(1,6),rep(2,5), rep(3,5), rep(4,5), rep(5,5)))
x=c(rep(1:5,5),6)
plot(x, y, pch = 0:25, cex=1.5, ylim=c(1,5.5), xlim=c(1,6.5),
axes=FALSE, xlab="", ylab="", bg="#FFCD00")
text(x, y, labels=0:25, pos=3)
par(mar=oldPar$mar,font=oldPar$font )
}
generateRPointShapes()
generateRPointShapes()
ggsave("Shapes_R.png", dpi=1000)
ggplot2::ggsave("Shapes_R.png", dpi=1000)
