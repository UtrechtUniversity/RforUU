vjust = 0,
inherit.aes = FALSE)
plot
plot <- data_nmds |>
ggplot(aes(x = MDS1,
y = MDS2,
colour = Arrival,
shape = Year))+
geom_point(size=2)+
theme_bw()+
scale_colour_viridis(name = "Plant order of arrival",
discrete = TRUE,
option = "D")+
scale_shape_manual(name = "Year of initiation",
values = c(16, 17))+
theme(axis.text = element_text(colour="black"),
axis.title.x = element_text(margin = margin(t=10)),
axis.title.y = element_text(margin = margin(r=10)))+
xlab("NMDS1")+
ylab("NMDS2")+
geom_text(data=data.frame(x=min(data_nmds$MDS1),
y=max(data_nmds$MDS2),
label=paste("Stress = ",
round(nmds$stress, 3),
sep="")),
aes(x = x,
y = y,
label = label),
hjust = 1,
vjust = 0,
inherit.aes = FALSE)
plot
plot <- data_nmds |>
ggplot(aes(x = MDS1,
y = MDS2,
colour = Arrival,
shape = Year))+
geom_point(size=2)+
theme_bw()+
scale_colour_viridis(name = "Plant order of arrival",
discrete = TRUE,
option = "D")+
scale_shape_manual(name = "Year of initiation",
values = c(16, 17))+
theme(axis.text = element_text(colour="black"),
axis.title.x = element_text(margin = margin(t=10)),
axis.title.y = element_text(margin = margin(r=10)))+
xlab("NMDS1")+
ylab("NMDS2")+
geom_text(data=data.frame(x=min(data_nmds$MDS1),
y=max(data_nmds$MDS2),
label=paste("Stress = ",
round(nmds$stress, 3),
sep="")),
aes(x = x,
y = y,
label = label),
hjust = 0.5,
vjust = 0,
inherit.aes = FALSE)
plot
plot <- data_nmds |>
ggplot(aes(x = MDS1,
y = MDS2,
colour = Arrival,
shape = Year))+
geom_point(size=2)+
theme_bw()+
scale_colour_viridis(name = "Plant order of arrival",
discrete = TRUE,
option = "D")+
scale_shape_manual(name = "Year of initiation",
values = c(16, 17))+
theme(axis.text = element_text(colour="black"),
axis.title.x = element_text(margin = margin(t=10)),
axis.title.y = element_text(margin = margin(r=10)))+
xlab("NMDS1")+
ylab("NMDS2")+
geom_text(data=data.frame(x=min(data_nmds$MDS1),
y=max(data_nmds$MDS2),
label=paste("Stress = ",
round(nmds$stress, 3),
sep="")),
aes(x = x,
y = y,
label = label),
hjust = 0.8,
vjust = 0,
inherit.aes = FALSE)
plot
plot <- data_nmds |>
ggplot(aes(x = MDS1,
y = MDS2,
colour = Arrival,
shape = Year))+
geom_point(size=2)+
theme_bw()+
scale_colour_viridis(name = "Plant order of arrival",
discrete = TRUE,
option = "D")+
scale_shape_manual(name = "Year of initiation",
values = c(16, 17))+
theme(axis.text = element_text(colour="black"),
axis.title.x = element_text(margin = margin(t=10)),
axis.title.y = element_text(margin = margin(r=10)))+
xlab("NMDS1")+
ylab("NMDS2")+
geom_text(data=data.frame(x=min(data_nmds$MDS1),
y=max(data_nmds$MDS2),
label=paste("Stress = ",
round(nmds$stress, 3),
sep="")),
aes(x = x,
y = y,
label = label),
hjust = 0.2,
vjust = 0,
inherit.aes = FALSE)
plot
plot <- data_nmds |>
ggplot(aes(x = MDS1,
y = MDS2,
colour = Arrival,
shape = Year))+
geom_point(size=2)+
theme_bw()+
scale_colour_viridis(name = "Plant order of arrival",
discrete = TRUE,
option = "D")+
scale_shape_manual(name = "Year of initiation",
values = c(16, 17))+
theme(axis.text = element_text(colour="black"),
axis.title.x = element_text(margin = margin(t=10)),
axis.title.y = element_text(margin = margin(r=10)))+
xlab("NMDS1")+
ylab("NMDS2")+
geom_text(data=data.frame(x=min(data_nmds$MDS1),
y=max(data_nmds$MDS2),
label=paste("Stress = ",
round(nmds$stress, 3),
sep="")),
aes(x = x,
y = y,
label = label),
hjust = 0.1,
vjust = 0,
inherit.aes = FALSE)
plot
library(tidyverse)
library(tidyverse)
plot(1:10, 1:10)
urlfile<-'https://raw.github.com/BenjaminDelory/GEO2-2439/master/Data/data_vegetation.csv'
data<-read.csv(urlfile)
View(data)
data<-read_csv(urlfile)
library(tidyverse)
data<-read_csv(urlfile)
View(data)
data <- readr::read_csv(url)
url <- "https://raw.github.com/BenjaminDelory/GEO2-2439/master/Data/data_vegetation.csv"
data <- readr::read_csv(url)
View(data)
data <- separate_wider_delim(data = data,
cols = "Site",
delim="_",
names=c("SiteCode", "Habitat"),
cols_remove=TRUE) #Do not keep Plot column in the data
View(data)
update.packages("tidyverse")
update.packages("tidyverse")
install.packages("ggplot2", lib="C:/R431/RfW/library")
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages("ggplot2", lib="C:/R431/RfW/library")
#| eval: true
#| echo: true
#| warning: false
#| message: false
library(tidyverse)
library(knitr)
url <- "https://raw.github.com/BenjaminDelory/GEO2-2439/master/Data/data_vegetation.csv"
data <- readr::read_csv(url)
View(data)
data <- separate_wider_delim(data = data,
cols = "Site",
delim="_",
names=c("SiteCode", "Habitat"),
cols_remove=TRUE) #Do not keep Plot column in the data
data <- readr::read_csv(url)
data <- data |>
separate_wider_delim(cols = "Site",
delim="_",
names=c("SiteCode", "Habitat"),
cols_remove=TRUE) |>
mutate(Habitat=as.factor(Habitat)) |>
rename(Site_code=SiteCode)
kable(head(data, n = 10))
data_wide <- data |>
pivot_wider(names_from = Species, #Species names will be used as column names
values_from = Cover, #Cover values are stored in the Cover column
values_fill = 0) #If a species is absent in a plot, its Cover value is zero
class(data
)
data_wide <- data |>
pivot_wider(names_from = Species, #Species names will be used as column names
values_from = Cover, #Cover values are stored in the Cover column
values_fill = 0,
values_fn = mean) #If a species is absent in a plot, its Cover value is zero
View(data_wide)
dim(data_wide)
data_long <- data_wide |>
pivot_longer(cols = `Achillea_millefolium`:`Athyrium_sp`, #From column X to column Y
names_to = "Species", #Store species names in Species column
values_to = "Cover") #Store cover data in Cover column
View(data_long)
data_filtered <- data_long |>
filter(Habitat == "grassland") #Select grassland data only
View(data_filtered)
data_filtered <- data_long |>
filter(Habitat == "grassland" & Location == 1) #Select grassland data only
data_filtered <- data_long |>
filter(Location == 2) |>
filter(Habitat == "forest" | Habitat == "peatland")
data_filtered <- data_long |>
filter(Location != 1) |>
filter(Habitat != "grassland" | Habitat != "heathland")
data_filtered <- data_long |>
filter(Location != 1) |>
filter(Habitat != "grassland" & Habitat != "heathland")
data_filtered <- data_long |>
filter(Location == 2) |>
filter(Habitat %in% c("forest", "peatland"))
data_arranged <- data_long |>
arrange(Species, Plot, Location, Site)
data_arranged <- data_long |>
arrange(Species, Plot, Location, Habitat)
View(data_arranged)
data_arranged <- data_long |>
arrange(Species, Plot, Location, Site_code)
data_arranged <- data_long |>
arrange(Species, Plot, Location, Site_code, desc(Cover))
data_subset <- data_wide |>
select(Date, Habitat, Location, Plot,
Calluna_vulgaris,
Caltha_palustris,
Sanguisorba_minor,
Sorbus_aucuparia)
View(data_subset)
data <- data |>
mutate(Std_cover=Cover/100, #Scale from 0 to 1
.after = "Cover") #Specify that we want this new column to be after the Cover column
View(data)
data_summary <- data |>
group_by(Date, Site, Location, Plot, Species) |> #Define grouping factors in your data
summarise(Avg_cover=mean(Cover),
Sd_cover=sd(Cover),
n_cover=n(Cover)) #Calculates the average cover of each species in a plot (across observations made by different students)
data_summary <- data |>
group_by(Date, Habitat, Location, Plot, Species) |> #Define grouping factors in your data
summarise(Avg_cover=mean(Cover),
Sd_cover=sd(Cover),
n_cover=n(Cover)) #Calculates the average cover of each species in a plot (across observations made by different students)
data_summary <- data |>
group_by(Date, Habitat, Location, Plot, Species) |> #Define grouping factors in your data
summarise(Avg_cover=mean(Cover),
Sd_cover=sd(Cover),
n_cover=length(Cover)) #Calculates the average cover of each species in a plot (across observations made by different students)
View(data_summary)
data_summary <- data |>
group_by(Date, Habitat, Location, Plot, Species) |> #Define grouping factors in your data
summarise(Avg_cover=mean(Cover), #Calculates summary statistics
Sd_cover=sd(Cover),
n_cover=n())
data_summary <- data |>
group_by(Date, Habitat, Location, Plot, Species) |> #Define grouping factors in your data
summarise(Avg_cover=mean(Cover), #Calculates summary statistics
Sd_cover=sd(Cover),
n_cover=length(Cover))
7.33*0.15+6.75*0.15+6.31*0.35+2.73*0.35
data_challenge <- data |>
filter(Date == "2024-05-27") |>
filter((Habitat == "grassland" & Location == "1") | (Habitat == "peatland" & Location == "2"))
View(data_challenge)
data_challenge <- data |>
filter(Date == "2024-05-27") |>
filter(Habitat == "grassland" & Location == "1" | Habitat == "peatland" & Location == "2")
data_challenge <- data |>
filter(Date == "2024-05-27") |>
filter((Habitat == "grassland" & Location == 1) | (Habitat == "peatland" & Location == 2))
data_challenge <- data |>
filter(Date == "2024-05-27")
data_challenge <- data |>
filter(Date == "2024-5-27") |>
filter((Habitat == "grassland" & Location == 1) | (Habitat == "peatland" & Location == 2))
data_challenge <- data |>
filter(Date == "2024-5-27") |>
filter((Habitat == "grassland" & Location == 1) | (Habitat == "peatland" & Location == 2)) |>
mutate(Std_cover=Cover/100, #Scale from 0 to 1
.after = "Cover") |>
group_by(Habitat, Location, Species) |> #Define grouping factors in your data
summarise(Avg_cover=mean(Cover), #Calculates summary statistics
Sd_cover=sd(Cover),
n_cover=length(Cover)) |>
add_column(SE_cover = Sd_cover/sqrt(n_cover))
data_challenge <- data |>
filter(Date == "2024-5-27") |>
filter((Habitat == "grassland" & Location == 1) | (Habitat == "peatland" & Location == 2)) |>
mutate(Std_cover=Cover/100, #Scale from 0 to 1
.after = "Cover") |>
group_by(Habitat, Location, Species) |> #Define grouping factors in your data
summarise(Avg_cover=mean(Std_cover), #Calculates summary statistics
Sd_cover=sd(Std_cover),
n_cover=length(Std_cover),
Se_cover = sd(Std_cover)/sqrt(length(Std_cover)))
data_challenge <- data |>
filter(Date == "2024-5-27") |>
filter((Habitat == "grassland" & Location == 1) | (Habitat == "peatland" & Location == 2)) |>
mutate(Std_cover=Cover/100, #Scale from 0 to 1
.after = "Cover") |>
group_by(Habitat, Location, Species) |> #Define grouping factors in your data
summarise(Avg_cover=mean(Std_cover), #Calculates summary statistics
Sd_cover=sd(Std_cover),
n_cover=length(Std_cover),
Se_cover = sd(Std_cover)/sqrt(length(Std_cover))) |>
arrange(Habitat, desc(Avg_cover))
data_challenge <- data |>
filter(Date == "2024-5-27") |>
filter((Habitat == "grassland" & Location == 1) | (Habitat == "peatland" & Location == 2)) |>
mutate(Std_cover=Cover/100, #Scale from 0 to 1
.after = "Cover") |>
group_by(Habitat, Location, Species) |> #Define grouping factors in your data
summarise(Avg_cover=mean(Std_cover), #Calculates summary statistics
Sd_cover=sd(Std_cover),
n_cover=length(Std_cover),
Se_cover = sd(Std_cover)/sqrt(length(Std_cover))) |>
filter(n_cover > 1) |>
arrange(Habitat, desc(Avg_cover))
data_challenge <- data |>
filter(Date == "2024-5-27") |>
filter((Habitat == "grassland" & Location == 1) | (Habitat == "peatland" & Location == 2)) |>
mutate(Std_cover=Cover/100, #Scale from 0 to 1
.after = "Cover") |>
group_by(Habitat, Location, Species) |> #Define grouping factors in your data
summarise(Avg_cover=mean(Std_cover), #Calculates summary statistics
Sd_cover=sd(Std_cover),
n_cover=length(Std_cover),
Se_cover = sd(Std_cover)/sqrt(length(Std_cover))) |>
filter(n_cover >= 5) |>
arrange(Habitat, desc(Avg_cover))
#| eval: false
#| echo: true
#| warning: false
#| message: false
#URL to access the data
url <- "https://raw.github.com/BenjaminDelory/GEO2-2439/master/Data/data_vegetation.csv"
#Import data in R
data <- readr::read_csv(url)
#| eval: false
#| echo: true
#| warning: false
#| message: false
View(data)
#| eval: true
#| echo: true
#| warning: false
#| message: false
data <- separate_wider_delim(data = data,
cols = "Site",
delim="_",
names=c("SiteCode", "Habitat"),
cols_remove=TRUE) #Do not keep Plot column in the data
#| eval: true
#| echo: true
#| warning: false
#| message: false
#Recreate starting dataset
data <- readr::read_csv(url)
#| eval: true
#| echo: true
#| warning: false
#| message: false
#Extract information from the Plot column using the pipe
data <- data |>
separate_wider_delim(cols = "Site",
delim="_",
names=c("SiteCode", "Habitat"),
cols_remove=TRUE) |>
mutate(Habitat=as.factor(Habitat)) |>
rename(Site_code=SiteCode)
#| eval: true
#| echo: true
#| warning: false
#| message: false
kable(head(data, n = 10))
#| eval: true
#| echo: true
#| warning: false
#| message: false
#Use pivot_wider so that the cover of each species is stored as a separate variable
data_wide <- data |>
pivot_wider(names_from = Species, #Species names will be used as column names
values_from = Cover, #Cover values are stored in the Cover column
values_fill = 0, #Replace missing values by zero
values_fn = mean) #Calculate the average cover value of a species in a plot if there is more than one occurrence
#| eval: true
#| echo: true
#| warning: false
#| message: false
dim(data_wide)
#| eval: true
#| echo: true
#| warning: false
#| message: false
data_long <- data_wide |>
pivot_longer(cols = `Achillea_millefolium`:`Athyrium_sp`, #From column X to column Y
names_to = "Species", #Store species names in Species column
values_to = "Cover") #Store cover data in Cover column
#| eval: true
#| echo: true
#| warning: false
#| message: false
data_filtered <- data |>
filter(Habitat == "grassland" & Location == 1) #Select grassland data only
#| eval: true
#| echo: true
#| warning: false
#| message: false
#Option 1
data_filtered <- data |>
filter(Location == 2) |>
filter(Habitat == "forest" | Habitat == "peatland")
#Option 2
data_filtered <- data |>
filter(Location != 1) |>
filter(Habitat != "grassland" & Habitat != "heathland")
#Option 3
data_filtered <- data |>
filter(Location == 2) |>
filter(Habitat %in% c("forest", "peatland"))
#| eval: true
#| echo: true
#| warning: false
#| message: false
data_arranged <- data |>
arrange(Species, Plot, Location, Site_code)
#| eval: true
#| echo: true
#| warning: false
#| message: false
data_arranged <- data |>
arrange(Species, Plot, Location, Site_code, desc(Cover))
#| eval: true
#| echo: true
#| warning: false
#| message: false
data_subset <- data_wide |>
select(Date, Habitat, Location, Plot,
Calluna_vulgaris,
Caltha_palustris,
Sanguisorba_minor,
Sorbus_aucuparia)
#| eval: true
#| echo: true
#| warning: false
#| message: false
data <- data |>
mutate(Std_cover=Cover/100, #Scale from 0 to 1
.after = "Cover") #Specify that we want this new column to be after the Cover column
#| eval: true
#| echo: true
#| warning: false
#| message: false
data_summary <- data |>
group_by(Date, Habitat, Location, Plot, Species) |> #Define grouping factors in your data
summarise(Avg_cover=mean(Cover), #Calculates summary statistics
Sd_cover=sd(Cover),
n_cover=length(Cover))
#| eval: true
#| echo: true
#| warning: false
#| message: false
data_challenge <- data |>
filter(Date == "2024-5-27") |> #Step 1
filter((Habitat == "grassland" & Location == 1) | (Habitat == "peatland" & Location == 2)) |> #Step 1
mutate(Std_cover=Cover/100, #Step 2
.after = "Cover") |>
group_by(Habitat, Location, Species) |> #Step 3
summarise(Avg_cover=mean(Std_cover), #Step 3
Sd_cover=sd(Std_cover), #Step 3
n_cover=length(Std_cover), #Step 3
Se_cover = sd(Std_cover)/sqrt(length(Std_cover))) |> #Step 3
filter(n_cover >= 5) |> #Step 4
arrange(Habitat, desc(Avg_cover)) #Step 5
#| eval: false
#| echo: true
#| warning: false
#| message: false
#URL to access the data
url <- "https://raw.github.com/BenjaminDelory/GEO2-2439/master/Data/data_vegetation.csv"
#Import data in R
data <- readr::read_csv(url)
#| eval: true
#| echo: true
#| warning: false
#| message: false
data <- tidyr::separate_wider_delim(data = data,
cols = "Site",
delim="_",
names=c("SiteCode", "Habitat"),
cols_remove=TRUE) #Do not keep Plot column in the data
